import HoTTModel.LocallyCartesianClosed.ChosenPullbacks
import HoTTModel.ContextualCategory.Universe

noncomputable section

open CategoryTheory Limits List LocallyCartesianClosed

variable {C : Type u} [CategoryTheory.Category.{v, u} C]

namespace Universe
variable (U : Universe C)
set_option linter.unusedSectionVars false

section
variable [HasFiniteWidePullbacks C] [LocallyCartesianClosed C] {X : C} (f : X ‚ü∂ U.down)

namespace Pi
variable [HasBinaryProducts C] {t : C} (ht : IsTerminal t)

abbrev op := (Œ†(U.hom)).obj U.proj‚ÇÇ'

abbrev obj := (op U).left

abbrev hom : obj U ‚ü∂ U.down := (op U).hom

abbrev gen‚ÇÅ : C := U.pt (hom U)

abbrev gen‚ÇÅ_fst : gen‚ÇÅ U ‚ü∂ U.up := U.fst (hom U)

abbrev gen‚ÇÅ_snd : gen‚ÇÅ U ‚ü∂ obj U := U.snd (hom U)

abbrev gen‚ÇÅ_fst' : Over U.up := U.fst' (hom U)

abbrev gen‚ÇÅ_snd' : Over (obj U) := U.snd' (hom U)

abbrev gen‚ÇÇ_hom‚ÇÄ : gen‚ÇÅ_fst' U ‚ü∂ U.proj‚ÇÇ' :=
  (IsPullback.adjEquiv (U.isPullback (hom U)).flip _).symm (ùüô _)

lemma gen‚ÇÇ_hom‚ÇÄ_comp_prod_snd :
    (gen‚ÇÇ_hom‚ÇÄ U).left ‚â´ prod.snd = gen‚ÇÅ_fst U :=
  Over.w (gen‚ÇÇ_hom‚ÇÄ U)

abbrev gen‚ÇÇ_hom : gen‚ÇÅ U ‚ü∂ U.down := (gen‚ÇÇ_hom‚ÇÄ U).left ‚â´ U.proj‚ÇÅ

abbrev gen‚ÇÇ_hom' : Over U.down := Over.mk (gen‚ÇÇ_hom U)

abbrev Gen‚ÇÇ : C := U.pt (gen‚ÇÇ_hom U)

abbrev gen‚ÇÇ_fst : Gen‚ÇÇ U ‚ü∂ U.up := U.fst (gen‚ÇÇ_hom U)

abbrev gen‚ÇÇ_snd : Gen‚ÇÇ U ‚ü∂ gen‚ÇÅ U := U.snd (gen‚ÇÇ_hom U)

abbrev gen‚ÇÇ_fst' : Over U.up := U.fst' (gen‚ÇÇ_hom U)

abbrev gen‚ÇÇ_snd' : Over (gen‚ÇÅ U) := U.snd' (gen‚ÇÇ_hom U)

structure Structure where
  hom : (op U).left ‚ü∂ U.down
  iso : (Œ†(gen‚ÇÅ_snd U)).obj (gen‚ÇÇ_snd' U) ‚âÖ U.snd' hom

abbrev Structure.fst (S : Structure U) : ((Œ†(gen‚ÇÅ_snd U)).obj (gen‚ÇÇ_snd' U)).left ‚ü∂ U.up :=
  S.iso.hom.left ‚â´ U.fst S.hom

lemma Structure.isPullback (S : Structure U) :
    IsPullback S.fst ((Œ†(gen‚ÇÅ_snd U)).obj (gen‚ÇÇ_snd' U)).hom U.hom S.hom := by
  apply (U.isPullback S.hom).of_iso ((Over.forget _).mapIso S.iso.symm)
    (Iso.refl _) (Iso.refl _) (Iso.refl _)
  all_goals simp [fst]
  rw [‚Üê Over.comp_left_assoc, Iso.inv_hom_id, Over.id_left, Category.id_comp]

-- the iso means, we would later need to do pullback along `gen‚ÇÅ_snd`
-- but since the `gen‚ÇÅ_snd` is a pullback of the universe
-- we can choose the pullbacks as ones along compositions!!!!

section

variable {U} {Œì A B : C} {Œ¥ : Œì ‚ü∂ U.down} {Œ≥ : A ‚ü∂ U.up} {œÄ : A ‚ü∂ Œì}
  {Œ¥' : A ‚ü∂ U.down} {Œ≥' : B ‚ü∂ U.up} {œÄ' : B ‚ü∂ A}
  (is : IsPullback Œ≥ œÄ U.hom Œ¥) (is' : IsPullback Œ≥' œÄ' U.hom Œ¥')

def form‚ÇÄ' (_ : IsPullback Œ≥' œÄ' U.hom Œ¥') : Over.mk Œ¥ ‚ü∂ op U :=
  IsPullback.adjEquiv is.flip _ (Over.homMk (prod.lift Œ¥' Œ≥))

abbrev form‚ÇÄ : Œì ‚ü∂ obj U := (form‚ÇÄ' is is').left

lemma form‚ÇÄ_comp_hom : form‚ÇÄ is is' ‚â´ hom U = Œ¥ := by
  simp only [Over.w, Over.mk_hom]

def form‚ÇÅ' : Over.mk Œ≥ ‚ü∂ gen‚ÇÅ_fst' U :=
  is.flip.liftIsPullbackAlong' (U.isPullback (hom U)).flip (form‚ÇÄ' is is')

abbrev form‚ÇÅ : A ‚ü∂ gen‚ÇÅ U := (form‚ÇÅ' is is').left

lemma form‚ÇÅ'_comp_gen‚ÇÇhom‚ÇÄ :
    form‚ÇÅ' is is' ‚â´ gen‚ÇÇ_hom‚ÇÄ U = Over.homMk (prod.lift Œ¥' Œ≥) := by
  simp only [form‚ÇÅ', gen‚ÇÇ_hom‚ÇÄ]
  rw [IsPullback.adjEquiv_naturality_symm_left, Category.comp_id]
  simp [form‚ÇÄ', Equiv.symm_apply_apply]

@[simp, reassoc]
lemma form‚ÇÅ_comp_gen‚ÇÇhom‚ÇÄ_left :
    form‚ÇÅ is is' ‚â´ (gen‚ÇÇ_hom‚ÇÄ U).left = prod.lift Œ¥' Œ≥ :=
  congrArg CommaMorphism.left (form‚ÇÅ'_comp_gen‚ÇÇhom‚ÇÄ is is')

@[simp]
lemma form‚ÇÅ_comp_Gen‚ÇÇhom :
    form‚ÇÅ is is' ‚â´ gen‚ÇÇ_hom U = Œ¥' := by
  simp [gen‚ÇÇ_hom, ‚Üê Category.assoc, form‚ÇÅ_comp_gen‚ÇÇhom‚ÇÄ_left]

@[simp]
lemma form‚ÇÅ_comp_fst :
    form‚ÇÅ is is' ‚â´ gen‚ÇÅ_fst U = Œ≥ := by
  rw [‚Üê gen‚ÇÇ_hom‚ÇÄ_comp_prod_snd, form‚ÇÅ_comp_gen‚ÇÇhom‚ÇÄ_left_assoc, prod.lift_snd]

@[simp]
lemma form‚ÇÅ_comp_snd :
    form‚ÇÅ is is' ‚â´ gen‚ÇÅ_snd U = œÄ ‚â´ form‚ÇÄ is is' := by
  simp [form‚ÇÅ, form‚ÇÅ']

def form‚ÇÅ'' : Over.mk Œ¥' ‚ü∂ Over.mk (gen‚ÇÇ_hom U) :=
  Over.homMk (form‚ÇÅ is is') (form‚ÇÅ_comp_Gen‚ÇÇhom is is')

def form‚ÇÇ' : Over.mk Œ≥' ‚ü∂ gen‚ÇÇ_fst' U :=
  is'.flip.liftIsPullbackAlong' (U.isPullback (gen‚ÇÇ_hom U)).flip (form‚ÇÅ'' is is')

abbrev form‚ÇÇ : B ‚ü∂ Gen‚ÇÇ U := (form‚ÇÇ' is is').left

@[simp]
lemma form‚ÇÇ_comp_fst :
    form‚ÇÇ is is' ‚â´ gen‚ÇÇ_fst U = Œ≥' := by
  simp [form‚ÇÇ, form‚ÇÇ', Pi.form‚ÇÇ_comp_fst]

@[simp]
lemma form‚ÇÇ_comp_snd :
    form‚ÇÇ is is' ‚â´ gen‚ÇÇ_snd U = œÄ' ‚â´ form‚ÇÅ is is' := by
  simp [form‚ÇÇ, form‚ÇÇ', form‚ÇÅ'']

def form‚ÇÅ_isPullback :
    IsPullback (form‚ÇÅ is is') œÄ (gen‚ÇÅ_snd U) (form‚ÇÄ is is') := by
  apply IsPullback.of_right _ (form‚ÇÅ_comp_snd is is') (U.isPullback (hom U))
  simpa using is

def form‚ÇÇ_isPullback :
    IsPullback (form‚ÇÇ is is') œÄ' (gen‚ÇÇ_snd U) (form‚ÇÅ is is') := by
  apply IsPullback.of_right _ (form‚ÇÇ_comp_snd is is') (U.isPullback (gen‚ÇÇ_hom U))
  simpa using is'

variable {is is'}

lemma form‚ÇÄ'_ext (f : Over.mk Œ¥ ‚ü∂ op U)
  (hf : (is.flip.liftIsPullbackAlong' (U.isPullback (hom U)).flip f).left ‚â´ gen‚ÇÇ_hom U = Œ¥') :
    f = form‚ÇÄ' is is' := by
  simp [form‚ÇÄ']
  apply_fun (IsPullback.adjEquiv is.flip U.proj‚ÇÇ').symm
  rw [Equiv.symm_apply_apply, ‚Üê Category.comp_id f,
      ‚Üê IsPullback.adjEquiv_naturality_symm_left (U.isPullback _).flip]
  ext; apply Limits.prod.hom_ext
  . simpa using hf
  . simp; erw [gen‚ÇÇ_hom‚ÇÄ_comp_prod_snd, IsPullback.liftIsPullbackAlong_snd]

lemma form‚ÇÄ_ext (f : Œì ‚ü∂ obj U)
  (hf‚ÇÅ : f ‚â´ hom U = Œ¥) (hf‚ÇÇ : (is.flip.liftIsPullbackAlong' (U.isPullback (hom U)).flip
    (Over.homMk f hf‚ÇÅ : Over.mk Œ¥ ‚ü∂ op U)).left ‚â´ gen‚ÇÇ_hom U = Œ¥') :
    f = form‚ÇÄ is is' := by
  change (Over.homMk f hf‚ÇÅ : Over.mk Œ¥ ‚ü∂ op U).left = (form‚ÇÄ' is is').left
  rw [form‚ÇÄ'_ext _ hf‚ÇÇ]

end
end Pi
end
