import Mathlib.AlgebraicTopology.SimplicialSet
import Mathlib.SetTheory.Ordinal.Basic
import Mathlib.SetTheory.Cardinal.Cofinality
import Mathlib.CategoryTheory.Limits.Shapes.Pullbacks

-- This file aims to construct a universe in sSet
open Simplicial CategoryTheory Opposite Limits Functor

namespace SSet

variable {X Y : SSet} (f : X ‚ü∂ Y)

section WellOrdered

notation "[" n "]" => Opposite.op (SimplexCategory.mk n)

abbrev Fibre (f : X ‚ü∂ Y) {n : ‚Ñï} (y : Y _[n]) : Set (X _[n]) :=
  (f.app [n]) ‚Åª¬π' {y}

notation f "‚Åª¬π" y => Fibre f y

-- decide to use PartialOrder -- Preorder doesn't have antisymmetric for `‚â§`
structure WellOrderedMap (X Y : SSet) where
  map : X ‚ü∂ Y
  ord {n : ‚Ñï} {y : Y _[n]} : PartialOrder (map ‚Åª¬π y)
  well_ord : IsWellOrder _ ((ord (y := y)).lt)

attribute [instance] WellOrderedMap.ord WellOrderedMap.well_ord

notation X " ‚ü∂‚Çí " Y => WellOrderedMap X Y

/-
#check instIsAntisymmLt

instance {f : X ‚ü∂‚Çí Y} {n : ‚Ñï} {y : Y _[n]} : IsAsymm ‚Üë(f.map‚Åª¬πy) fun a b ‚Ü¶ a ‚â§ b := instIsAsymmOfIsWellOrder _

instance {f : X ‚ü∂‚Çí Y} {n : ‚Ñï} {y : Y _[n]} : PartialOrder (f.map ‚Åª¬π y) where
  le := f.ord.le
  le_refl := f.ord.le_refl
  le_trans := f.ord.le_trans
  le_antisymm := (IsAsymm.isAntisymm _).antisymm
-/


def FibTrans {f : X ‚ü∂ Y} {f' : X' ‚ü∂ Y} (g : X ‚ü∂ X') {y : Y _[n]}
  (comm : f = g ‚â´ f') (a : ‚Üë(f ‚Åª¬π y)): ‚Üë(f' ‚Åª¬π y) := ‚ü®(g.app [n]) a,
    by
      simp
      have : f'.app [n] (g.app [n] ‚Üëa) = (g ‚â´ f').app [n] ‚Üëa := rfl
      rw [this, ‚Üê comm]
      exact a.2
    ‚ü©

-- can't find: nonempty set in a well order has a least element

lemma FibTrans.eq_iff_eq {f : X ‚ü∂ Y} {f' : X' ‚ü∂ Y} (F : Iso X X') {y : Y _[n]}
  (comm : f = F.hom ‚â´ f') (a b : ‚Üë(f ‚Åª¬π y)): a = b ‚Üî FibTrans F.hom comm a = FibTrans F.hom comm b := by
    constructor
    exact fun h ‚Ü¶ (by rw [h])
    intro h
    apply_fun FibTrans (f := f') (f' := f) F.inv (by simp [comm]) at h
    simp [FibTrans] at h
    exact h

lemma isLeast_lt_false {Œ± Œ≤: Type} [Preorder Œ±] [Preorder Œ≤] [IsWellOrder Œ± (¬∑ < ¬∑)] [IsWellOrder Œ≤ (¬∑ < ¬∑)] {f g : Œ± ‚âÉo Œ≤} {a : Œ±} (ha : IsLeast {a | f a = g a}·∂ú a) (lt : f a < g a) : False := by
  set a' := g.symm (f a) with ha'
  apply_fun g at ha'
  simp at ha'
  have aux : f a' < g a' := by
    rwa [ha', OrderIso.lt_iff_lt f, ‚Üê OrderIso.lt_iff_lt g, ha']
  have : f a ‚â§ f a' := by rw [OrderIso.le_iff_le]; exact ha.2 aux.ne
  apply False.elim <| (lt_self_iff_false (f a')).mp (lt_of_lt_of_le aux (ha'.symm ‚ñ∏ this))


-- use this : InitialSeg.ofIso
def _root_.OrderIso.toInitialSeg {Œ± Œ≤: Type*} [Preorder Œ±] [Preorder Œ≤] (f : Œ± ‚âÉo Œ≤) : InitialSeg (Œ± := Œ±) (Œ≤ := Œ≤) (¬∑ < ¬∑) (¬∑ < ¬∑) where
  toFun := f
  inj' := f.injective
  map_rel_iff' := by simp only [Function.Embedding.coeFn_mk, OrderIso.lt_iff_lt, implies_true]
  init' := by
    intro _ b _
    use f.symm b
    simp only [RelEmbedding.coe_mk, Function.Embedding.coeFn_mk, OrderIso.apply_symm_apply]

lemma initialSeg_of_isWellOrder_eq {Œ± Œ≤: Type*} [Preorder Œ±] [Preorder Œ≤] (f : Œ± ‚âÉo Œ≤) (a : Œ±) : f a = f.toInitialSeg a := by
  simp only [OrderIso.toInitialSeg]
  rfl

lemma _root_.IsWellOrder.OrderIso_apply_eq (Œ± Œ≤: Type*) [Preorder Œ±] [Preorder Œ≤] [IsWellOrder Œ± (¬∑ < ¬∑)] [IsWellOrder Œ≤ (¬∑ < ¬∑)] (f g : Œ± ‚âÉo Œ≤) (a : Œ±) : f a = g a := by
  rw [initialSeg_of_isWellOrder_eq, initialSeg_of_isWellOrder_eq]
  apply InitialSeg.eq

lemma _root_.IsWellOrder.OrderIso_eq (Œ± Œ≤: Type) [Preorder Œ±] [Preorder Œ≤] [IsWellOrder Œ± (¬∑ < ¬∑)] [IsWellOrder Œ≤ (¬∑ < ¬∑)] (f g : Œ± ‚âÉo Œ≤) : f = g := by
  ext
  apply IsWellOrder.OrderIso_apply_eq

@[ext]
structure OrderIso (f : X ‚ü∂‚Çí Y) (f' : X' ‚ü∂‚Çí Y) extends Iso X X' where
  comm : f.1 = hom ‚â´ f'.1
  lt_iff_lt {y : Y _[n]} (a b : ‚Üë((f.1) ‚Åª¬π y)) : a < b ‚Üî (FibTrans hom comm a) < (FibTrans hom comm b)

-- this is stupid!!!
lemma OrderIso.ext' {f : X ‚ü∂‚Çí Y} {f' : X' ‚ü∂‚Çí Y} (F G : OrderIso f f') (w : F.hom = G.hom) : F = G := by
  ext1
  exact w
  have : F.toIso = G.toIso := Iso.ext w
  apply_fun Iso.inv at this
  exact this

def OrderIso.symm {f : X ‚ü∂‚Çí Y} {f' : X' ‚ü∂‚Çí Y} (F : OrderIso f f') : OrderIso f' f where
  hom := F.inv
  inv := F.hom
  hom_inv_id := F.inv_hom_id
  inv_hom_id := F.hom_inv_id
  comm := by rw [F.comm]; simp only [Iso.inv_hom_id_assoc]
  lt_iff_lt {n} {y} a b := by
    rw [F.lt_iff_lt]
    simp only [FibTrans, FunctorToTypes.inv_hom_id_app_apply, Subtype.coe_eta]

@[simp]
lemma OrderIso.symm_hom {f : X ‚ü∂‚Çí Y} {f' : X' ‚ü∂‚Çí Y} (F : OrderIso f f') : F.symm.hom = F.inv := rfl

#check OrderIso.ofRelIsoLT

-- define that OrderIso gives an `OrderIso` between fibres
def FibreOrderIso {f : X ‚ü∂‚Çí Y} {g : X' ‚ü∂‚Çí Y} (F : OrderIso f g) {n : ‚Ñï} (y : Y _[n]) : (f.map ‚Åª¬π y) ‚âÉo (g.map ‚Åª¬π y) where
  toFun x := FibTrans F.hom F.comm x
  invFun x := FibTrans F.symm.hom F.symm.comm x
  left_inv := by simp only [Function.LeftInverse, FibTrans, OrderIso.symm_hom,
      FunctorToTypes.hom_inv_id_app_apply, implies_true]
  right_inv := by simp only [Function.RightInverse, Function.LeftInverse, FibTrans,
    OrderIso.symm_hom, FunctorToTypes.inv_hom_id_app_apply, implies_true]
  map_rel_iff' {a} {b} := by
    simp only [OrderIso.symm_hom, Equiv.coe_fn_mk, le_iff_eq_or_lt]
    rw [F.lt_iff_lt, ‚Üê FibTrans.eq_iff_eq _ F.comm _ _]


-- the default ext for simplcial map is not easy to use

lemma SimplicialMap_ext {f g: X ‚ü∂ Y} (h : ‚àÄ n (x : X _[n]), f.app [n] x = g.app [n] x): f = g := by
  ext n a
  cases n with
  | op n => apply h (SimplexCategory.len n)

lemma subsingleton_OrderIso {f : X ‚ü∂‚Çí Y} {f' : X' ‚ü∂‚Çí Y} (F G : OrderIso f f') : F = G := by
  apply OrderIso.ext'
  apply SimplicialMap_ext
  intro n a
  set F' := FibreOrderIso F (f.map.app [n] a)
  set G' := FibreOrderIso G (f.map.app [n] a)
  have aux1 : F.hom.app [n] a = (FibreOrderIso F (f.map.app [n] a)) ‚ü®a, by simp‚ü© := by
    simp only [FibreOrderIso, FibTrans, OrderIso.symm_hom, RelIso.coe_fn_mk, Equiv.coe_fn_mk]
  have aux2 : G.hom.app [n] a = G' ‚ü®a, by simp‚ü© := by
    simp [G', FibreOrderIso, FibTrans, OrderIso.symm_hom, RelIso.coe_fn_mk, Equiv.coe_fn_mk]
  have : F' ‚ü®a, by simp‚ü© = G' ‚ü®a, by simp‚ü© := by
    apply IsWellOrder.OrderIso_apply_eq _ _ F' G'
  rw [aux1, aux2, this]

end WellOrdered

section UniversalSimplicialSet

variable (Œ± : Cardinal.{0}) {reg : Cardinal.IsRegular Œ±}

abbrev Œ±_small (f : X ‚ü∂ Y) := ‚àÄ n, ‚àÄ y : Y _[n], Cardinal.mk (f ‚Åª¬π y) < Œ±

structure Œ±_smallWO (Y : SSet) where
  of : SSet
  map : of ‚ü∂‚Çí Y
  Œ±_small : Œ±_small Œ± map.1

def Œ±_smallWO.rel {Œ±} (f g : Œ±_smallWO Œ± Y) : Prop := Nonempty (OrderIso f.2 g.2)

def Œ±_smallWO.rel_iseqv {Œ±} : Equivalence (Œ±_smallWO.rel (Y := Y) (Œ± := Œ±)) := sorry

instance Setoid_Œ±_smallWO {Œ±} : Setoid (Œ±_smallWO Œ± Y) where
  r := Œ±_smallWO.rel
  iseqv := Œ±_smallWO.rel_iseqv

def _Œ©_obj (Œ±) (Y) := Quotient (@Setoid_Œ±_smallWO Y Œ±)


-- size issue here
-- use `Small` to circumvent this temporarily
instance : Small.{0,1} (_Œ©_obj Œ± Y) := sorry

abbrev Œ©_obj (Œ±) (Y) := Shrink (_Œ©_obj Œ± Y)


def Œ©_map (f : Y ‚ü∂ Y') : Œ©_obj Œ± Y' ‚ü∂ Œ©_obj Œ± Y := sorry

lemma Œ©_map_id : Œ©_map Œ± (ùüô Y) = ùüô (Œ©_obj Œ± Y) := sorry

lemma Œ©_map_comp {f : Y ‚ü∂ Y'} {g : Y' ‚ü∂ Y''}: (Œ©_map Œ± g) ‚â´ (Œ©_map Œ± f) = Œ©_map Œ± (f ‚â´ g) := sorry

def Œ© : SSet·µí·µñ ‚•§ Type 0 where
  obj Y := Œ©_obj Œ± (unop Y)
  map f := Œ©_map Œ± (unop f)
  map_id Y := by simp; rw [‚Üê Œ©_map_id]; apply congrArg; exact unop_id -- rw does not work....
  map_comp f g:= by simp; rw [Œ©_map_comp]; apply congrArg; exact unop_comp

def W : SSet := Functor.op (yoneda (C:= SimplexCategory)) ‚ãô Œ© Œ±

/-
yoneda.op : SimplexCategory·µí·µñ ‚•§ (SimplexCategory·µí·µñ ‚•§ Type)·µí·µñ
-/

instance Œ©PreservesLimitsOfSize : PreservesLimitsOfSize.{1,0} (Œ© Œ±) := sorry

-- the names are BAD!!!!

def W_represent_Œ© : yoneda.obj (W Œ±) ‚âÖ (Œ© Œ±) := sorry

variable (Z : SSet.{0})

def W_represent_Œ©_app := (W_represent_Œ© Œ±).app (op Z)

def toW_of_Œ© (a : (Œ© Œ±).obj (op Z)) : Z ‚ü∂ (W Œ±) := (W_represent_Œ©_app Œ± Z).inv a

def Œ©_of_toW (f : Z ‚ü∂ (W Œ±)) : (Œ© Œ±).obj (op Z) := (W_represent_Œ©_app Œ± Z).hom f

end UniversalSimplicialSet

end SSet
