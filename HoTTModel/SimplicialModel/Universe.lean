import HoTTModel.SimplicialModel.Fibre

namespace SSet

noncomputable section

-- This file aims to construct a universe in sSet
open Simplicial CategoryTheory Opposite Limits Functor Set
universe u

variable {Œ± : Cardinal.{u}} {Y : SSet.{u}}

variable (Œ± Y) in
def Œ©_obj := Shrink (Œ©_obj‚ÇÄ Œ± Y)

def Œ©_obj.mk (a : SmallWO Œ± Y) : Œ©_obj Œ± Y :=
  equivShrink (Œ©_obj‚ÇÄ Œ± Y) ‚ü¶a‚üß

def Œ©_obj.out (a : Œ©_obj Œ± Y) : SmallWO Œ± Y :=
  ((equivShrink (Œ©_obj‚ÇÄ Œ± Y)).symm a).out

@[simp]
lemma Œ©_obj.mk_out_eq (a : Œ©_obj Œ± Y) :
    mk a.out = a := by
  simp [mk, out]

lemma Œ©_obj.out_mk_equiv (a : SmallWO Œ± Y) :
    (mk a).out ‚âà a := by
  simp only [out, mk, Equiv.symm_apply_apply, ‚Üê Quotient.eq_iff_equiv, Quotient.out_eq]

lemma Œ©_obj.mk_eq_mk_iff_equiv (a b : SmallWO Œ± Y) :
    Œ©_obj.mk a = Œ©_obj.mk b ‚Üî a ‚âà b := by
  simp [mk, (equivShrink (Œ©_obj‚ÇÄ Œ± Y)).apply_eq_iff_eq]; exact Quotient.eq

lemma Œ©_obj.mk_sound {a b : SmallWO Œ± Y} :
    a ‚âà b ‚Üí Œ©_obj.mk a = Œ©_obj.mk b := by
  intro h
  simp only [mk, (equivShrink (Œ©_obj‚ÇÄ Œ± Y)).apply_eq_iff_eq]
  apply Quotient.sound h

-- define the functor, which acts on morphisms as pullback
noncomputable section map
variable (a : SmallWO Œ± Y) (f : Y' ‚ü∂ Y)

def SmallWO.pullback :
    SmallWO Œ± Y' where
  of := Limits.pullback a.wo.hom f
  wo := {
    hom := pullback.snd a.wo.hom f
    ord := (IsPullback.of_hasPullback a.wo.hom f).FibreLinearOrder _
    isWellOrder := IsPullback.FibreLinearOrder.isWellOrder _ _
  }
  small n y := by
    convert a.small (f.app _ y) using 1
    exact Quotient.sound ‚ü®(IsPullback.of_hasPullback a.wo.hom f).FibreEquiv y‚ü©

def SmallWO.FibreOrderIsoCast {y y' : Y.obj n} (eq : y = y') :
    a.wo‚Åª¬π y ‚âÉo a.wo‚Åª¬π y' :=
  RelIso.cast (by cases eq; rfl) (by cases eq; rfl)

@[simp]
lemma SmallWO.FibreOrderIsoCast_refl {y : Y.obj n} (x : a.wo‚Åª¬π y):
    a.FibreOrderIsoCast (Eq.refl y) x = x := rfl

lemma SmallWO.FibreOrderIsoCast_move {n m} {y y' : Y.obj n} (eq : y = y') (œÜ : n ‚ü∂ m)
  (x : a.wo‚Åª¬π y) (h : Y.map œÜ y = Y.map œÜ y'):
    a.FibreOrderIsoCast h (move œÜ x) = move œÜ (a.FibreOrderIsoCast eq x) := by
  cases eq; rfl

-- RelIso on fibres via pullback
def SmallWO.pullback_RelIso' {n} (y' : Y'.obj n):
    (a.pullback f).wo‚Åª¬π y' ‚âÉo a.wo‚Åª¬π (f.app _ y') :=
  IsPullback.FibreLinearOrder.OrderIso _ y'

def SmallWO.pullback_RelIso {n} (y : Y.obj n) (y' : Y'.obj n)
  (h : f.app _ y' = y) :
    (a.pullback f).wo‚Åª¬π y' ‚âÉo a.wo‚Åª¬π y :=
  (a.pullback_RelIso' f y').trans (a.FibreOrderIsoCast h)

lemma SmallWO.pullback_RelIso_move {n m} (y : Y.obj n) (y' : Y'.obj n) (h : f.app _ y' = y)
  (œÜ : n ‚ü∂ m) (x : (a.pullback f).wo‚Åª¬π y') (h'):
    a.pullback_RelIso f (Y.map œÜ y) (Y'.map œÜ y') h' (move œÜ x) =
  move œÜ (a.pullback_RelIso f y y' h x) := by
    cases h
    simp [pullback_RelIso, pullback_RelIso', IsPullback.FibreEquiv, FibreOrderIsoCast,
          IsPullback.PreimageEquiv, move, hom_naturality_apply]

lemma SmallWO.pullback_RelIso_symm_move {n m} (y : Y.obj n) (y' : Y'.obj n)
  (h : f.app _ y' = y) (œÜ : n ‚ü∂ m) (x : a.wo‚Åª¬π y) {h'}:
    (a.pullback_RelIso f (Y.map œÜ y) (Y'.map œÜ y') h').symm (move œÜ x) =
  move œÜ ((a.pullback_RelIso f y y' h).symm x) := by
    apply_fun (a.pullback_RelIso f (Y.map œÜ y) (Y'.map œÜ y') h')
    rw [a.pullback_RelIso_move _ _ _ h]
    simp only [OrderIso.apply_symm_apply]

lemma SmallWO.pullback_RelIso'_move {n m} (y' : Y'.obj n) (œÜ : n ‚ü∂ m)
  (x : (a.pullback f).wo‚Åª¬π y') :
    a.pullback_RelIso' f (Y'.map œÜ y') (move œÜ x) =
      (a.FibreOrderIsoCast (hom_naturality_apply _ _ _).symm) (move œÜ
        (a.pullback_RelIso f (f.app _ y') y' rfl x)) := by
  simp [pullback_RelIso, pullback_RelIso', IsPullback.FibreEquiv, FibreOrderIsoCast,
          IsPullback.PreimageEquiv, move, hom_naturality_apply]

lemma SmallWO.pullback_id :
    a.pullback (ùüô Y) ‚âà a := by
  have : IsIso (pullback.fst a.hom (ùüô Y)) := by
    rw [‚Üê (IsPullback.of_hasPullback a.hom (ùüô Y)).isoIsPullback_hom_fst _ _
      (IsPullback.id_horiz a.hom)]
    infer_instance
  exact ‚ü®{
    toIso := asIso (pullback.fst a.wo.hom (ùüô Y))
    comm := by simp [pullback.condition]; rfl
    mono := by
      intro _ y _ _ h
      rwa [IsPullback.FibreLinearOrder.le_iff_le] at h
  }‚ü©

open IsPullback in
lemma SmallWO.pullback_comp {f : Z ‚ü∂ Y} {g : W ‚ü∂ Z} :
    (a.pullback f).pullback g ‚âà a.pullback (g ‚â´ f):= by
  let is := IsPullback.of_hasPullback a.hom (g ‚â´ f)
  let is' := IsPullback.paste_horiz (IsPullback.of_hasPullback (pullback.snd a.hom f) g)
    (IsPullback.of_hasPullback a.hom f)
  exact ‚ü®{
    toIso := is'.isoIsPullback _ _ is
    comm := by erw [IsPullback.isoIsPullback_hom_snd]; rfl
    mono := by
      intro n y b c h
      rw [FibreLinearOrder.le_iff_le, FibreLinearOrder.le_iff_le] at h
      rw [FibreLinearOrder.le_iff_le]
      convert h using 1
      all_goals
      simp [IsPullback.FibreEquiv, PreimageEquiv, OrderIso.trans,
            Fibre.trans]
      change (_ ‚àò _) _ = (_ ‚àò _) _
      rw [‚Üê types_comp, ‚Üê types_comp, ‚Üê NatTrans.comp_app, ‚Üê NatTrans.comp_app,
          IsPullback.isoIsPullback_hom_fst]
      rfl
  }‚ü©

variable {f} in
open IsPullback in
lemma SmallWO.pullback_sound {a b : SmallWO Œ± Y} :
    a ‚âà b ‚Üí a.pullback f ‚âà b.pullback f
| ‚ü®h‚ü© => ‚ü®{
    toIso := asIso (pullback.map a.hom f b.hom f h.hom (ùüô _) (ùüô _)
      (by simp [h.comm]) (by simp))
    comm := by simp; erw [pullback.lift_snd, Category.comp_id]; rfl
    mono := by
      intro n y c d hcd
      rw [FibreLinearOrder.le_iff_le, h.le_iff_le] at hcd
      rw [FibreLinearOrder.le_iff_le]
      convert hcd
      all_goals
      simp [IsPullback.FibreEquiv, PreimageEquiv, OrderIso.trans,
            Fibre.trans]
      change (_ ‚àò _) _ = (_ ‚àò _) _
      rw [‚Üê types_comp, ‚Üê types_comp, ‚Üê NatTrans.comp_app, ‚Üê NatTrans.comp_app,
          pullback.lift_fst]
  }‚ü©

variable (Œ±) in
def Œ©_map : Œ©_obj Œ± Y ‚ü∂ Œ©_obj Œ± Y' :=
  Shrink.rec (Quotient.lift (Œ©_obj.mk ‚àò fun a ‚Ü¶ a.pullback f)
    (fun _ _ h ‚Ü¶ Œ©_obj.mk_sound (SmallWO.pullback_sound h)))

@[simp]
lemma Œ©_map.mk_eq :
  Œ©_map Œ± f (Œ©_obj.mk a) =  Œ©_obj.mk (a.pullback f) := by
    simp only [Œ©_obj.mk, Œ©_map, Shrink.rec, Equiv.symm_apply_apply, eq_rec_constant]
    erw [Quotient.lift_mk, Function.comp_apply]
    rfl

lemma Œ©_map_id : Œ©_map Œ± (ùüô Y) = ùüô (Œ©_obj Œ± Y) := by
  ext a; revert a
  apply Shrink.rec; apply Quotient.ind
  intro a
  simp only [types_id_apply, EmbeddingLike.apply_eq_iff_eq]
  erw [Œ©_map.mk_eq]
  exact Œ©_obj.mk_sound (SmallWO.pullback_id _)

lemma Œ©_map_comp {f : Y ‚ü∂ Y'} {g : Y' ‚ü∂ Y''}:
    (Œ©_map Œ± g) ‚â´ (Œ©_map Œ± f) = Œ©_map Œ± (f ‚â´ g) := by
  ext a; revert a
  apply Shrink.rec; apply Quotient.ind
  intro a
  simp only [types_comp_apply, EmbeddingLike.apply_eq_iff_eq]
  erw [Œ©_map.mk_eq, Œ©_map.mk_eq, Œ©_map.mk_eq]
  apply Œ©_obj.mk_sound a.pullback_comp

namespace Œ©_map

variable (f : Y' ‚ü∂ Y) (a : Œ©_obj Œ± Y) (y : Y.obj n) (y' : Y'.obj n)
  (h : f.app _ y' = y)

def out_equiv :
    ‚àÄ a : Œ©_obj Œ± Y,  (Œ©_map Œ± f a).out ‚âà a.out.pullback f := by
  apply Shrink.rec; apply Quotient.ind
  intro a; erw [Œ©_map.mk_eq]
  exact Setoid.trans (Œ©_obj.out_mk_equiv (a.pullback f))
    (SmallWO.pullback_sound (Setoid.symm (Œ©_obj.out_mk_equiv _)))

def outOrderIso :
    OrderIso (Œ©_map Œ± f a).out.wo (a.out.pullback f).wo :=
  Classical.choice (out_equiv f a)

def outOrderIsoFibre :
    (Œ©_map Œ± f a).out.wo‚Åª¬π y' ‚âÉo (a.out.pullback f).wo‚Åª¬π y' :=
  OrderIso.FibreOrderIso (outOrderIso f a) _

def FibreOrderIso :
    (Œ©_map Œ± f a).out.wo‚Åª¬π y' ‚âÉo a.out.wo‚Åª¬π y :=
  (outOrderIsoFibre f a y').trans (a.out.pullback_RelIso f y y' h)

def FibreOrderIsoCast (f : Y' ‚ü∂ Y) (a : Œ©_obj Œ± Y) (b : Œ©_obj Œ± Y')
  (h : Œ©_map Œ± f a = b) {n} (y : Y.obj n) (y' : Y'.obj n)
  (h' : f.app _ y' = y) :
    a.out.wo‚Åª¬π y ‚âÉo b.out.wo‚Åª¬π y' :=
  (FibreOrderIso f a y y' h').symm.trans (RelIso.cast (by cases h; rfl) (by cases h; rfl))

lemma FibreOrderIsoCast_move (f : Y' ‚ü∂ Y) (a : Œ©_obj Œ± Y) (b : Œ©_obj Œ± Y')
  (h : Œ©_map Œ± f a = b) (y : Y.obj n) (y' : Y'.obj n) (h' : f.app _ y' = y)
  (œÜ : n ‚ü∂ m) (h'') (z : a.out.wo‚Åª¬π y) :
    FibreOrderIsoCast f a b h (œÜ ~ y) (œÜ ~ y') h'' (move œÜ z) =
      move œÜ (FibreOrderIsoCast f a b h y y' h' z) := by
  ext
  cases h; cases h'
  simp [FibreOrderIsoCast, FibreOrderIso, outOrderIsoFibre]
  rw [SmallWO.pullback_RelIso_symm_move, OrderIso.FibreOrderIso_symm_move]

lemma FibreOrderIsoCast_symm_move (f : Y' ‚ü∂ Y) (a : Œ©_obj Œ± Y) (b : Œ©_obj Œ± Y')
  (h : Œ©_map Œ± f a = b) (y : Y.obj n) (y' : Y'.obj n) (h' : f.app _ y' = y)
  (œÜ : n ‚ü∂ m) (h'') (z : b.out.wo‚Åª¬π y') :
    (FibreOrderIsoCast f a b h (œÜ ~ y) (œÜ ~ y') h'').symm (move œÜ z) =
      move œÜ ((FibreOrderIsoCast f a b h y y' h').symm z) := by
  apply_fun (FibreOrderIsoCast f a b h (œÜ ~ y) (œÜ ~ y') h'')
  rw [FibreOrderIsoCast_move (h' := h')]
  simp only [OrderIso.apply_symm_apply]

end Œ©_map

end map

variable (Œ±)

def Œ© : SSet·µí·µñ ‚•§ Type u where
  obj Y := Œ©_obj Œ± (unop Y)
  map f := Œ©_map Œ± (unop f)
  map_id Y := by simp; rw [‚Üê Œ©_map_id]; rfl
  map_comp f g:= by simp; rw [Œ©_map_comp]; rfl

section

variable [UnivLE.{v, u}] {J : Type v} [Category.{w,v} J] {F : J ‚•§ SSet.{u}·µí·µñ}
  (c : Cone F) (hc : IsLimit c)

namespace Œ©.PreservesLimit

open Function Classical

-- view `c.pt.unop` as the limit of `F`

/--
  Morphism from `(Œ© Œ±).mapCone c` to the limit cone of `F ‚ãô Œ© Œ±`.
  Will show this is an isomorphism so that `(Œ© Œ±).mapCone c` is a limit cone.
-/
abbrev HomToLimit :
    (Œ© Œ±).mapCone c ‚ü∂ limit.cone (F ‚ãô Œ© Œ±) where
  hom := limit.lift _ _
  w := limit.lift_œÄ _

lemma HomToLimit_hom_œÄ (f : Œ©_obj Œ± c.pt.unop) (j : J) :
    limit.œÄ (F ‚ãô Œ© Œ±) j (limit.lift (F ‚ãô Œ© Œ±) ((Œ© Œ±).mapCone c) f) =
      (Œ© Œ±).map (c.œÄ.app j) f :=
  congrFun (limit.lift_œÄ ((Œ© Œ±).mapCone c) j) _

variable {Œ± c}

/--
  For any two SmallWO `f,g` over `lim F`,
  if their pullbacks along `F j` are isomorphic,
  then we can construct `OrderIso` between any corresponded fibres
  as compositions of three `OrderIso`s.
-/
def FibreOrderIsoOfPullback (f g : SmallWO Œ± c.pt.unop)
  (h : (j : J) ‚Üí (OrderIso (f.pullback (c.œÄ.app j).unop).wo (g.pullback (c.œÄ.app j).unop).wo))
  {n : SimplexCategory·µí·µñ} (y : c.pt.unop.obj n)
  (j : J) (x : (F.obj j).unop.obj n) (hx : (c.œÄ.app j).unop.app _ x = y):
    f.wo‚Åª¬π y ‚âÉo g.wo‚Åª¬π y := by
  let r‚ÇÅ := f.pullback_RelIso (c.œÄ.app j).unop y x hx
  let r‚ÇÇ := (h j).FibreOrderIso x
  let r‚ÇÉ := g.pullback_RelIso (c.œÄ.app j).unop y x hx
  exact (r‚ÇÅ.symm.trans r‚ÇÇ).trans r‚ÇÉ

omit [UnivLE.{v, u}] in
/--
  By the virtue of well-order, `FibreOrderIso` is indepdent of the choice of `j` and `x`.
-/
lemma FibreOrderIsoOfPullback_ext {f g : SmallWO Œ± c.pt.unop}
  {h : (j : J) ‚Üí (OrderIso (f.pullback (c.œÄ.app j).unop).wo (g.pullback (c.œÄ.app j).unop).wo)}
  {n : SimplexCategory·µí·µñ} {y : (unop c.pt).obj n}
  (j : J) (x : (F.obj j).unop.obj n) (hx : (c.œÄ.app j).unop.app _ x = y)
  (j' : J) (x' : (F.obj j').unop.obj n) (hx' : (c.œÄ.app j').unop.app _ x' = y) :
    FibreOrderIsoOfPullback f g h y j x hx = FibreOrderIsoOfPullback f g h y j' x' hx' :=
  IsWellOrder.OrderIso_ext _ _

lemma jointly_surjective (hc : IsLimit c) (y : c.pt.unop.obj n) :
  ‚àÉ (j : J) (x : (F.obj j).unop.obj n), (c.œÄ.app j).unop.app _ x = y := by
    have : IsColimit $ (ev n).mapCocone (coconeLeftOpOfCone c) :=
      PreservesColimit.preserves (isColimitCoconeLeftOpOfCone _ hc)
    obtain ‚ü®j, ‚ü®x, h‚ü©‚ü© := Types.jointly_surjective (F ‚ãô (ev n).op).leftOp this y
    exact ‚ü®j.unop, ‚ü®x, h‚ü©‚ü©

def choose_j (y : c.pt.unop.obj n) : J :=
  choose (jointly_surjective hc y)

lemma choose_spec_j (y : c.pt.unop.obj n) :
    ‚àÉ x : (F.obj (choose_j hc y)).unop.obj n, (c.œÄ.app _).unop.app _ x = y :=
  choose_spec (jointly_surjective hc y)

def choose_x (y : c.pt.unop.obj n) : (F.obj (choose_j hc y)).unop.obj n :=
  choose (choose_spec_j hc y)

lemma choose_spec_x (y : c.pt.unop.obj n) :
    (c.œÄ.app _).unop.app _ (choose_x hc y) = y :=
  choose_spec (choose_spec_j hc y)

/--
  `FibreOrderIso` where `j` and `x` are given by `jointly_surjective`
-/
def FibreOrderIsoOfPullbackChoose (f g : SmallWO Œ± c.pt.unop)
  (h : (j : J) ‚Üí (OrderIso (f.pullback (c.œÄ.app j).unop).wo (g.pullback (c.œÄ.app j).unop).wo))
  {n : SimplexCategory·µí·µñ} (y : (unop c.pt).obj n) :
    f.wo‚Åª¬π y ‚âÉo g.wo‚Åª¬π y :=
  FibreOrderIsoOfPullback f g h y (choose_j hc y) (choose_x hc y) (choose_spec_x hc y)

def PiecesOfPullbackOrderIso (f g : SmallWO Œ± c.pt.unop)
  (h : (j : J) ‚Üí (OrderIso (f.pullback (c.œÄ.app j).unop).wo (g.pullback (c.œÄ.app j).unop).wo)):
    Pieces f.wo g.wo where
  orderIso := FibreOrderIsoOfPullbackChoose hc f g h
  compatible := by
    intro n m œÜ y y'
    let j := choose_j hc y
    let x := choose_x hc y
    let x‚ÇÇ := (F.obj j).unop.map œÜ x
    have hx‚ÇÇ : (c.œÄ.app j).unop.app m x‚ÇÇ = c.pt.unop.map œÜ y := by
      change ((F.obj j).unop.map œÜ ‚â´ (c.œÄ.app j).unop.app m) x = _
      rw [(c.œÄ.app j).unop.naturality, ‚Üê choose_spec_x hc y]; rfl
    dsimp [FibreOrderIsoOfPullbackChoose]
    rw [FibreOrderIsoOfPullback_ext _ _ _ (choose_j hc y) x‚ÇÇ hx‚ÇÇ]
    dsimp [FibreOrderIsoOfPullback]
    rw [f.pullback_RelIso_symm_move _ _ _ (choose_spec_x hc y), OrderIso.FibreOrderIso_move,
        g.pullback_RelIso_move]

def OrderIsoOfPullbackOrderIso (f g : SmallWO Œ± c.pt.unop)
  (h : ‚àÄ j : J, f.pullback (c.œÄ.app j).unop ‚âà g.pullback (c.œÄ.app j).unop) :
    OrderIso f.wo g.wo :=
  (PiecesOfPullbackOrderIso hc f g (fun j ‚Ü¶ choice (h j))).toOrderIso

variable (c) in
lemma HomToLimit_hom_injective (hc : IsLimit c):
    (limit.lift (F ‚ãô Œ© Œ±) ((Œ© Œ±).mapCone c)).Injective := by
  apply Shrink.rec; apply Quotient.ind; intro f
  apply Shrink.rec; apply Quotient.ind; intro g h
  have (j) := congrArg (limit.œÄ (F ‚ãô Œ© Œ±) j) h
  simp [HomToLimit_hom_œÄ] at this
  refine Œ©_obj.mk_sound ‚ü®OrderIsoOfPullbackOrderIso hc f g ?_‚ü©
  intro j; specialize this j
  change (Œ© Œ±).map (c.œÄ.app j) (Œ©_obj.mk _) = (Œ© Œ±).map (c.œÄ.app j) (Œ©_obj.mk _) at this
  simp [Œ©, Œ©_obj.mk_eq_mk_iff_equiv] at this
  exact this

variable (c) (f : limit (F ‚ãô Œ© Œ±))

def FibreOrderIsoOfExists {j j' : J} (x : (F.obj j).unop.obj n) (x' : (F.obj j').unop.obj n)
  (œÜ : j' ‚ü∂ j) (hœÜ : x' = (F.map œÜ).unop.app _ x):
    ((limit.œÄ (F ‚ãô Œ© Œ±) j) f).out.wo‚Åª¬π x ‚âÉo ((limit.œÄ (F ‚ãô Œ© Œ±) j') f).out.wo‚Åª¬π x' :=
  (Œ©_map.FibreOrderIsoCast (F.map œÜ).unop ((limit.œÄ (F ‚ãô Œ© Œ±) j') f)
    ((limit.œÄ (F ‚ãô Œ© Œ±) j) f) (congrFun (limit.w (F ‚ãô Œ© Œ±) œÜ) f) x' x hœÜ.symm).symm

open Types in
lemma eqvGen_of_app_eq (hc : IsLimit c) {j j' : J} (x : (F.obj j).unop.obj n)
  (x' : (F.obj j').unop.obj n) (h : (c.œÄ.app j).unop.app _ x = (c.œÄ.app j').unop.app _ x') :
    Relation.EqvGen (Quot.Rel (F.leftOp ‚ãô ev n)) ‚ü®op j, x‚ü© ‚ü®op j', x'‚ü© := by
  have : IsColimit $ (ev n).mapCocone (coconeLeftOpOfCone c) :=
      PreservesColimit.preserves (isColimitCoconeLeftOpOfCone _ hc)
  apply isColimit_eq _ this h

open Types in
lemma nonempty_OrderIso_of_eqvGen {n : SimplexCategory·µí·µñ}
  {p‚ÇÅ p‚ÇÇ : Œ£ j : J·µí·µñ, (F.obj j.unop).unop.obj n}
  (h : Relation.EqvGen (Quot.Rel (F.leftOp ‚ãô ev n)) p‚ÇÅ p‚ÇÇ) :
    Nonempty (((limit.œÄ (F ‚ãô Œ© Œ±) p‚ÇÅ.fst.unop) f).out.wo‚Åª¬π p‚ÇÅ.snd ‚âÉo
      ((limit.œÄ (F ‚ãô Œ© Œ±) p‚ÇÇ.fst.unop) f).out.wo‚Åª¬π p‚ÇÇ.snd) := by
  induction h with
  | rel _ _ h =>
      obtain ‚ü®œÜ, hœÜ‚ü© := h
      exact ‚ü®FibreOrderIsoOfExists _ _ _ œÜ.unop hœÜ‚ü©
  | refl _ => exact ‚ü®OrderIso.refl _‚ü©
  | symm _ _ _ ih =>
      obtain ‚ü®r‚ü© := ih
      exact ‚ü®r.symm‚ü©
  | trans _ _ _ _ _ ih‚ÇÅ ih‚ÇÇ =>
      obtain ‚ü®r‚ÇÅ‚ü© := ih‚ÇÅ
      obtain ‚ü®r‚ÇÇ‚ü© := ih‚ÇÇ
      exact ‚ü®r‚ÇÅ.trans r‚ÇÇ‚ü©

variable (f : limit (F ‚ãô Œ© Œ±))

def FibreOrderIsoOfAppEq {j j' : J} (x : (F.obj j).unop.obj n) (x' : (F.obj j').unop.obj n)
  (h : (c.œÄ.app j).unop.app _ x = (c.œÄ.app j').unop.app _ x') :
    ((limit.œÄ (F ‚ãô Œ© Œ±) j) f).out.wo‚Åª¬π x ‚âÉo ((limit.œÄ (F ‚ãô Œ© Œ±) j') f).out.wo‚Åª¬π x' := by
  /-
  (deterministic) timeout at `whnf`, maximum number of heartbeats (200000) has been reached
  Use `set_option maxHeartbeats <num>` to set the limit.
  Additional diagnostic information may be available using the `set_option diagnostics true` command.
  -/
  let r := choice (nonempty_OrderIso_of_eqvGen f (eqvGen_of_app_eq c hc x x' h))
  dsimp at r
  exact r

lemma FibreOrderIsoOfAppEq_symm_eq {j j' : J} (x : (F.obj j).unop.obj n)
  (x' : (F.obj j').unop.obj n) (h : (c.œÄ.app j).unop.app _ x = (c.œÄ.app j').unop.app _ x') :
    (FibreOrderIsoOfAppEq c hc f x x' h).symm = FibreOrderIsoOfAppEq c hc f x' x h.symm :=
  IsWellOrder.OrderIso_ext _ _

lemma FibreOrderIsoOfAppEq_swap_apply_apply {j j' : J} (x : (F.obj j).unop.obj n)
  (x' : (F.obj j').unop.obj n) (h : (c.œÄ.app j).unop.app _ x = (c.œÄ.app j').unop.app _ x')
  (t : _) :
    (FibreOrderIsoOfAppEq c hc f x x' h) (FibreOrderIsoOfAppEq c hc f x' x h.symm t) = t := by
  change ((FibreOrderIsoOfAppEq c hc f x' x h.symm).trans
    (FibreOrderIsoOfAppEq c hc f x x' h)) t = t
  rw [IsWellOrder.OrderIso_apply_eq (g := OrderIso.refl _) t]
  rfl

lemma FibreOrderIsoOfAppEq_congr {j j' k k' : J}
  (x : (F.obj j).unop.obj n) (x' : (F.obj j').unop.obj n)
  (y : (F.obj k).unop.obj n) (y' : (F.obj k').unop.obj n)
  {hx : (c.œÄ.app j).unop.app _ x = (c.œÄ.app j').unop.app _ x'}
  {hy : (c.œÄ.app k).unop.app _ y = (c.œÄ.app k').unop.app _ y'}
  (eq‚ÇÅ : j = k) (eq‚ÇÇ : j' = k') (heq‚ÇÅ : HEq x y) (heq‚ÇÇ : HEq x' y')
  (z : ((limit.œÄ (F ‚ãô Œ© Œ±) j) f).out.wo‚Åª¬π x)
  (z' : ((limit.œÄ (F ‚ãô Œ© Œ±) k) f).out.wo‚Åª¬π y) (heq‚ÇÉ : HEq z z') :
    HEq (FibreOrderIsoOfAppEq c hc f x x' hx z) (FibreOrderIsoOfAppEq c hc f y y' hy z') := by
  cases eq‚ÇÅ; cases eq‚ÇÇ; cases heq‚ÇÅ; cases heq‚ÇÇ; cases heq‚ÇÉ
  rfl

lemma FibreOrderIsoOfAppEq_symm_congr {j j' k k' : J}
  (x : (F.obj j).unop.obj n) (x' : (F.obj j').unop.obj n)
  (y : (F.obj k).unop.obj n) (y' : (F.obj k').unop.obj n)
  {hx : (c.œÄ.app j).unop.app _ x = (c.œÄ.app j').unop.app _ x'}
  {hy : (c.œÄ.app k).unop.app _ y = (c.œÄ.app k').unop.app _ y'}
  (eq‚ÇÅ : j = k) (eq‚ÇÇ : j' = k') (heq‚ÇÅ : HEq x y) (heq‚ÇÇ : HEq x' y')
  (z : ((limit.œÄ (F ‚ãô Œ© Œ±) j') f).out.wo‚Åª¬π x')
  (z' : ((limit.œÄ (F ‚ãô Œ© Œ±) k') f).out.wo‚Åª¬π y') (heq‚ÇÉ : HEq z z') :
    HEq ((FibreOrderIsoOfAppEq c hc f x x' hx).symm z)
      ((FibreOrderIsoOfAppEq c hc f y y' hy).symm z') := by
  cases eq‚ÇÅ; cases eq‚ÇÇ; cases heq‚ÇÅ; cases heq‚ÇÇ; cases heq‚ÇÉ
  rfl

lemma FibreOrderIsoOfAppEq_move' (p‚ÇÅ p‚ÇÇ : Œ£ j : J·µí·µñ, (F.obj j.unop).unop.obj n)
  (œÜ : n ‚ü∂ m) (h) (h') (t : ((limit.œÄ (F ‚ãô Œ© Œ±) _) f).out.wo‚Åª¬π p‚ÇÅ.snd) :
    FibreOrderIsoOfAppEq c hc f (œÜ ~ p‚ÇÅ.snd) (œÜ ~ p‚ÇÇ.snd) h' (move œÜ t) =
      move œÜ (FibreOrderIsoOfAppEq c hc f p‚ÇÅ.snd p‚ÇÇ.snd h t) := by
  have : Relation.EqvGen (Types.Quot.Rel (F.leftOp ‚ãô ev n)) p‚ÇÅ p‚ÇÇ
    := eqvGen_of_app_eq c hc _ _ h
  induction this with
  | rel x y ih =>
      obtain ‚ü®g, hg‚ü© := ih
      let s‚ÇÅ := FibreOrderIsoOfExists f x.snd y.snd g.unop hg
      let s‚ÇÇ := FibreOrderIsoOfExists f (œÜ ~ x.snd) (œÜ ~ y.snd) g.unop
        (by rw [hom_naturality_apply', hg]; rfl)
      rw [IsWellOrder.OrderIso_apply_eq (g := s‚ÇÅ),
          IsWellOrder.OrderIso_apply_eq (g := s‚ÇÇ)]
      apply Œ©_map.FibreOrderIsoCast_symm_move
  | refl x =>
      rw [IsWellOrder.OrderIso_apply_eq (g := OrderIso.refl _),
          IsWellOrder.OrderIso_apply_eq (g := OrderIso.refl _) t]
      rfl
  | symm x y _ ih =>
      specialize ih h.symm h'.symm
      apply_fun (FibreOrderIsoOfAppEq c hc f (œÜ ~ y.snd) (œÜ ~ x.snd) h').symm
      simp
      rw [FibreOrderIsoOfAppEq_symm_eq, ih, FibreOrderIsoOfAppEq_swap_apply_apply]
  | trans x y z r‚ÇÅ r‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
      have hxy : (c.œÄ.app (unop x.fst)).unop.app _ x.snd =
        (c.œÄ.app (unop y.fst)).unop.app _ y.snd :=
          Types.app_eq_of_eqvGen ((ev n).mapCocone (coconeLeftOpOfCone c)) _ _ r‚ÇÅ
      have hxy' : (c.œÄ.app (unop x.fst)).unop.app _ (œÜ ~ x.snd) =
        (c.œÄ.app (unop y.fst)).unop.app _ (œÜ ~ y.snd) := by
          rw [hom_naturality_apply', hom_naturality_apply', hxy]; rfl
      specialize ih‚ÇÅ hxy hxy'
      specialize ih‚ÇÇ (hxy.symm.trans h) (hxy'.symm.trans h')
      let s‚ÇÅ := (FibreOrderIsoOfAppEq c hc f (œÜ ~ x.snd) (œÜ ~ y.snd) hxy').trans
        (FibreOrderIsoOfAppEq c hc f (œÜ ~ y.snd) (œÜ ~ z.snd) (hxy'.symm.trans h'))
      rw [IsWellOrder.OrderIso_apply_eq (g := s‚ÇÅ)]; dsimp [s‚ÇÅ]
      rw [ih‚ÇÅ, ih‚ÇÇ]
      change move œÜ ((FibreOrderIsoOfAppEq c hc f x.snd y.snd hxy).trans _ _) = _
      rw [IsWellOrder.OrderIso_apply_eq]

lemma FibreOrderIsoOfAppEq_move {j j' : J} (x : (F.obj j).unop.obj n)
  (x' : (F.obj j').unop.obj n) (h : (c.œÄ.app j).unop.app _ x = (c.œÄ.app j').unop.app _ x')
  (œÜ : n ‚ü∂ m) (h') (t : ((limit.œÄ (F ‚ãô Œ© Œ±) j) f).out.wo‚Åª¬π x) :
    FibreOrderIsoOfAppEq c hc f (œÜ ~ x) (œÜ ~ x') h' (move œÜ t) =
      move œÜ (FibreOrderIsoOfAppEq c hc f x x' h t) := by
  apply FibreOrderIsoOfAppEq_move' c hc f ‚ü®op j, x‚ü© ‚ü®op j', x'‚ü©

def LimitToSSet :
    SSet.{u} where
  obj n :=
    (y : c.pt.unop.obj n) √ó (((limit.œÄ (F ‚ãô Œ© Œ±) (choose_j hc y)) f).out.wo‚Åª¬π (choose_x hc y))
  map {n m} œÜ := by
    intro z
    let H := FibreOrderIsoOfAppEq c hc f (choose_x hc (œÜ ~ z.fst)) (œÜ ~ choose_x hc z.fst)
      (by rw [hom_naturality_apply, choose_spec_x, choose_spec_x]; rfl)
    exact ‚ü®c.pt.unop.map œÜ z.fst, H.symm (move œÜ z.snd)‚ü©
  map_id n := by
    dsimp; ext z
    . simp
    . simp
      have heq (hx) := FibreOrderIsoOfAppEq_symm_congr c hc f (choose_x hc (ùüô n ~ z.fst))
        (ùüô n ~ choose_x hc z.fst) (choose_x hc z.fst) (choose_x hc z.fst) (hx := hx) (hy := rfl)
        (by simp) (by simp) (by congr; simp) (by simp) (move (ùüô n) z.snd) z.snd
        (by simp [move, Subtype.heq_iff_coe_eq])
      apply HEq.trans (heq _)
      rw [IsWellOrder.OrderIso_apply_eq (g := OrderIso.refl _)]
      rfl
  map_comp {n m k} œÜ œà := by
    dsimp; ext z
    . simp
    . cases z with
    | mk z y =>
      have heq‚ÇÅ (h) := FibreOrderIsoOfAppEq_symm_congr c hc f (choose_x hc ((œÜ ‚â´ œà) ~ z))
        ((œÜ ‚â´ œà) ~ choose_x hc z) (choose_x hc (œà ~ (unop c.pt).map œÜ z))
        ((œÜ ‚â´ œà) ~ choose_x hc z) (hx := h)
        (hy := by rw [hom_naturality_apply', choose_spec_x, choose_spec_x]; simp)
        (by simp) (by simp) (by congr 1; simp) (by simp)
        (move (œÜ ‚â´ œà) y) (move (œÜ ‚â´ œà) y) (by rfl)
      apply HEq.trans (heq‚ÇÅ _)
      simp [heq_eq_eq]
      let r‚ÇÅ := FibreOrderIsoOfAppEq c hc f ((œÜ ‚â´ œà) ~ choose_x hc z) (œà ~ choose_x hc (œÜ ~ z))
        (by rw [hom_naturality_apply', hom_naturality_apply', choose_spec_x, choose_spec_x]; simp)
      let r‚ÇÇ := FibreOrderIsoOfAppEq c hc f (œà ~ choose_x hc (œÜ ~ z)) (choose_x hc (œà ~ (œÜ ~ z)))
        (by rw [hom_naturality_apply', choose_spec_x, choose_spec_x]; rfl)
      rw [IsWellOrder.OrderIso_apply_eq (g := r‚ÇÅ.trans r‚ÇÇ), IsWellOrder.OrderIso_apply_eq (g := r‚ÇÇ)]
      have heq‚ÇÇ (h) := FibreOrderIsoOfAppEq_congr c hc f ((œÜ ‚â´ œà) ~ choose_x hc z)
        (œà ~ choose_x hc (œÜ ~ z)) (œà ~ (œÜ ~ choose_x hc z)) (œà ~ choose_x hc (œÜ ~ z)) (hx := h)
        (hy := by rw [hom_naturality_apply', hom_naturality_apply', hom_naturality_apply',
          choose_spec_x, choose_spec_x]; rfl)
        (by simp) (by simp) (by simp) (by simp)
        (move (œÜ ‚â´ œà) y) (move œà (move œÜ y)) move_comp_heq
      simp at heq‚ÇÇ; dsimp [r‚ÇÅ]
      rw [heq‚ÇÇ, FibreOrderIsoOfAppEq_move, FibreOrderIsoOfAppEq_symm_eq]
      rw [hom_naturality_apply', hom_naturality_apply', hom_naturality_apply',
          choose_spec_x, choose_spec_x]

def LimitToHom :
    LimitToSSet c hc f ‚ü∂ c.pt.unop where
  app _ := Sigma.fst
  naturality := by
    intro n m œÜ
    ext a; simp [LimitToSSet]

def LimitToHomFibreEquiv (y : c.pt.unop.obj n) :
  ((limit.œÄ (F ‚ãô Œ© Œ±) (choose_j hc y)) f).out.wo‚Åª¬π (choose_x hc y)
      ‚âÉ Fibre (LimitToHom c hc f) y :=
  Sigma.EquivFstPreimage _
    (fun y ‚Ü¶ ((limit.œÄ (F ‚ãô Œ© Œ±) (choose_j hc y)) f).out.wo‚Åª¬π (choose_x hc y)) y

instance : LinearOrder ‚Üë(Fibre (LimitToHom c hc f) y) :=
  LinearOrder.ofEquiv (LimitToHomFibreEquiv c hc f _)

def LimitToSmallWO :
    SmallWO Œ± c.pt.unop where
  of := LimitToSSet c hc f
  wo := {
    hom := LimitToHom c hc f
    ord := inferInstance
    isWellOrder := LinearOrder.ofEquiv.isWellOrderOfIsWellOrder _ inferInstance
  }
  small {n y} := by
    erw [Cardinal.mk_congr (LimitToHomFibreEquiv c hc f y).symm]
    apply SmallWO.small

def LimitToSmallWOFibreEquiv (y : c.pt.unop.obj n) :
  ((limit.œÄ (F ‚ãô Œ© Œ±) (choose_j hc y)) f).out.wo‚Åª¬π (choose_x hc y)
      ‚âÉo (LimitToSmallWO c hc f).wo‚Åª¬π y :=
  (LinearOrder.ofEquiv.OrderIso (LimitToHomFibreEquiv c hc f y))

open LinearOrder in
lemma LimitToSmallWO.move_eq (y : c.pt.unop.obj n) (x : (LimitToSmallWO c hc f).wo‚Åª¬π y)
  (œÜ : n ‚ü∂ m):
    let r := LimitToSmallWOFibreEquiv c hc f y;
    let s‚ÇÅ := LimitToSmallWOFibreEquiv c hc f (œÜ ~ y);
    let s‚ÇÇ := FibreOrderIsoOfAppEq c hc f (choose_x hc (œÜ ~ y)) (œÜ ~ choose_x hc y)
      (by rw [hom_naturality_apply', choose_spec_x, choose_spec_x]; rfl);
      s‚ÇÇ (s‚ÇÅ.symm (move œÜ x)) = move œÜ (r.symm x) := by
  ext
  cases x with
  | mk x hx =>
    cases x with
    | mk x z =>
      have : y = x := by
        simp only [WellOrderedHom.Fibre, Fibre, LimitToSmallWO, LimitToHom,
          Set.preimage, Set.mem_singleton] at hx
        exact eq_of_mem_singleton hx.symm
      cases this
      simp [move, LimitToSmallWOFibreEquiv]
      rw [ofEquiv.OrderIso_symm_apply, ofEquiv.OrderIso_symm_apply]
      simp [LimitToHomFibreEquiv, Sigma.EquivFstPreimage, LimitToSmallWO, LimitToSSet]
      rfl

def LimitToSmallWOOrderIso (y y') (h : (c.œÄ.app j).unop.app n y = y'):
    (LimitToSmallWO c hc f).wo‚Åª¬π y' ‚âÉo (limit.œÄ (F ‚ãô Œ© Œ±) j f).out.wo‚Åª¬π y := by
  let r := LimitToSmallWOFibreEquiv c hc f ((c.œÄ.app j).unop.app n y)
  let r' := FibreOrderIsoOfAppEq c hc f _ y (choose_spec_x hc ((c.œÄ.app j).unop.app n y))
  exact (SmallWO.FibreOrderIsoCast _ h.symm).trans (r.symm.trans r')

lemma LimitToSmallWOOrderIso_move (y : (F.obj j).unop.obj n)
  (y' : c.pt.unop.obj n) (h : (c.œÄ.app j).unop.app n y = y') (œÜ : n ‚ü∂ m)
  (x : ((LimitToSmallWO c hc f).wo‚Åª¬π y')) (h'):
    LimitToSmallWOOrderIso c hc f (œÜ ~ y) (œÜ ~ y') h' (move œÜ x) =
      move œÜ (LimitToSmallWOOrderIso c hc f y y' h x) := by
  cases h
  dsimp [LimitToSmallWOOrderIso]
  let r‚ÇÅ := (LimitToSmallWO c hc f).FibreOrderIsoCast h'.symm
  let r‚ÇÇ := LimitToSmallWOFibreEquiv c hc f ((c.œÄ.app j).unop.app m (œÜ ~ y))
  let r‚ÇÉ := FibreOrderIsoOfAppEq c hc f (choose_x hc ((c.œÄ.app j).unop.app m (œÜ ~ y))) (œÜ ~ y)
    (choose_spec_x _ _)
  let s‚ÇÅ := LimitToSmallWOFibreEquiv c hc f ((c.œÄ.app j).unop.app n y)
  let s‚ÇÇ := FibreOrderIsoOfAppEq c hc f (choose_x hc ((c.œÄ.app j).unop.app n y)) y (choose_spec_x _ _)
  change r‚ÇÉ (r‚ÇÇ.symm (r‚ÇÅ (move œÜ x))) = move œÜ (s‚ÇÇ (s‚ÇÅ.symm x))

  let t‚ÇÅ := LimitToSmallWOFibreEquiv c hc f (œÜ ~ (c.œÄ.app j).unop.app _ y)
  let t‚ÇÇ := FibreOrderIsoOfAppEq c hc f (choose_x hc (œÜ ~ (c.œÄ.app j).unop.app _ y))
    (choose_x hc ((c.œÄ.app j).unop.app m (œÜ ~ y)))
    (by rw [choose_spec_x, choose_spec_x, hom_naturality_apply']; rfl)
  -- t‚ÇÇ (t‚ÇÅ.symm _) = r‚ÇÇ.symm (r‚ÇÅ _)
  let t‚ÇÉ := FibreOrderIsoOfAppEq c hc f (choose_x hc (œÜ ~ (c.œÄ.app j).unop.app _ y))
    (œÜ ~ choose_x hc ((c.œÄ.app j).unop.app _ y))
    (by rw [choose_spec_x, hom_naturality_apply', choose_spec_x]; rfl)
  let t‚ÇÑ := FibreOrderIsoOfAppEq c hc f (œÜ ~ choose_x hc ((c.œÄ.app j).unop.app _ y)) (œÜ ~ y)
    (by rw [hom_naturality_apply', hom_naturality_apply', choose_spec_x]; rfl)

  have aux‚ÇÅ : r‚ÇÇ.symm (r‚ÇÅ (move œÜ x)) = t‚ÇÇ (t‚ÇÅ.symm (move œÜ x)) := by
    change (r‚ÇÅ.trans r‚ÇÇ.symm) (move œÜ x) = (t‚ÇÅ.symm.trans t‚ÇÇ) (move œÜ x)
    apply IsWellOrder.OrderIso_apply_eq

  have aux‚ÇÇ (z) : r‚ÇÉ (t‚ÇÇ z) = t‚ÇÑ (t‚ÇÉ z) := by
    change (t‚ÇÇ.trans r‚ÇÉ) z = (t‚ÇÉ.trans t‚ÇÑ) z
    apply IsWellOrder.OrderIso_apply_eq

  have aux‚ÇÉ : t‚ÇÉ (t‚ÇÅ.symm (move œÜ x)) = move œÜ (s‚ÇÅ.symm x) := by
    apply LimitToSmallWO.move_eq

  have aux‚ÇÑ (z) : t‚ÇÑ (move œÜ z) = move œÜ (s‚ÇÇ z) := by
    apply FibreOrderIsoOfAppEq_move

  rw [aux‚ÇÅ, aux‚ÇÇ, aux‚ÇÉ, aux‚ÇÑ]

lemma limit_ext (g : ((Œ© Œ±).mapCone c).pt)
  (h : ‚àÄ j, (Œ© Œ±).map (c.œÄ.app j) g = (limit.œÄ (F ‚ãô Œ© Œ±) j) f) :
    limit.lift (F ‚ãô Œ© Œ±) ((Œ© Œ±).mapCone c) g = f := by
  ext j
  refine Eq.trans ?_ (h j)
  change (limit.lift (F ‚ãô Œ© Œ±) _ ‚â´ limit.œÄ _ _) _ = _
  rw [limit.lift_œÄ]; rfl

def LimitToSmallWOPullbackFibreOrderIso {j : J} (y : (F.obj j).unop.obj n):
    ((LimitToSmallWO c hc f).pullback (c.œÄ.app j).unop).wo‚Åª¬π y ‚âÉo
  (Œ©_obj.out (limit.œÄ (F ‚ãô Œ© Œ±) j f)).wo‚Åª¬π y :=
    (SmallWO.pullback_RelIso' _ _ y).trans (LimitToSmallWOOrderIso c hc f y _ rfl)

lemma LimitToSmallWOPullbackFibreOrderIso_ext {j : J} {n m} (y : (F.obj j).unop.obj n)
  (œÜ : n ‚ü∂ m) :
  ((LimitToSmallWO c hc f).FibreOrderIsoCast (hom_naturality_apply _ _ _).symm).trans
      (LimitToSmallWOOrderIso c hc f ((F.obj j).unop.map œÜ y) _ rfl) =
    (LimitToSmallWOOrderIso c hc f _ _ (hom_naturality_apply (c.œÄ.app j).unop œÜ y)) :=
  IsWellOrder.OrderIso_ext _ _

lemma LimitToSmallWOPullbackFibreOrderIso_ext_apply {j : J} {n m} (y : (F.obj j).unop.obj n)
  (œÜ : n ‚ü∂ m) (x):
    ((LimitToSmallWO c hc f).FibreOrderIsoCast (hom_naturality_apply _ _ _).symm).trans
      (LimitToSmallWOOrderIso c hc f ((F.obj j).unop.map œÜ y) _ rfl) x =
    (LimitToSmallWOOrderIso c hc f _ _ (hom_naturality_apply (c.œÄ.app j).unop œÜ y)) x := by
  rw [LimitToSmallWOPullbackFibreOrderIso_ext]; rfl

def LimitToPieces (j : J) :
    Pieces ((LimitToSmallWO c hc f).pullback (c.œÄ.app j).unop).wo
      ((limit.œÄ (F ‚ãô Œ© Œ±) j) f).out.wo where
  orderIso y := LimitToSmallWOPullbackFibreOrderIso c hc f y
  compatible {n m} œÜ y x:= by
    dsimp [LimitToSmallWOPullbackFibreOrderIso]
    erw [SmallWO.pullback_RelIso'_move,
         LimitToSmallWOPullbackFibreOrderIso_ext_apply c hc f y œÜ _,
         LimitToSmallWOOrderIso_move]
    rfl

def LimitToSmallWOPullbackOrderIso (f : limit (F ‚ãô Œ© Œ±)) (j : J) :
    OrderIso ((LimitToSmallWO c hc f).pullback (unop (c.œÄ.app j))).wo
      ((limit.œÄ (F ‚ãô Œ© Œ±) j) f).out.wo :=
  (LimitToPieces c hc f j).toOrderIso

lemma HomToLimit_hom_surjective (hc : IsLimit c) :
    (limit.lift (F ‚ãô Œ© Œ±) ((Œ© Œ±).mapCone c)).Surjective := by
  intro f
  use Œ©_obj.mk (LimitToSmallWO c hc f)
  apply limit_ext
  intro j
  conv => lhs; dsimp [Œ©]; rw [Œ©_map.mk_eq]
  rw [‚Üê Œ©_obj.mk_out_eq (limit.œÄ (F ‚ãô Œ© Œ±) _ _)]
  exact Œ©_obj.mk_sound ‚ü®LimitToSmallWOPullbackOrderIso c hc f j‚ü©

variable (Œ±)
def IsoToLimitPt : ((Œ© Œ±).mapCone c).pt ‚âÖ (limit.cone (F ‚ãô Œ© Œ±)).pt := by
  apply Equiv.toIso (Equiv.ofBijective (HomToLimit Œ± c).hom _)
  exact ‚ü®HomToLimit_hom_injective _ hc, HomToLimit_hom_surjective _ hc‚ü©

def IsIsoToLimitPt : IsIso (HomToLimit Œ± c).hom where
  out := by
    use (IsoToLimitPt Œ± c hc).inv
    exact ‚ü®(IsoToLimitPt Œ± c hc).hom_inv_id, (IsoToLimitPt Œ± c hc).inv_hom_id‚ü©

def IsIsoToLimit : IsIso (HomToLimit Œ± c) := by
  have := IsIsoToLimitPt Œ± c hc
  apply Cones.cone_iso_of_hom_iso

end Œ©.PreservesLimit
open Œ©.PreservesLimit

instance Œ©.PreservesLimit :
    PreservesLimit F (Œ© Œ±) where
  preserves {c} hc := by
    have := IsIsoToLimit Œ± c hc
    exact IsLimit.ofIsoLimit (limit.isLimit _) (asIso (HomToLimit Œ± c)).symm

instance Œ©.PreservesLimitsOfSize :
    PreservesLimitsOfSize.{w, v} (Œ© Œ±) :=
  ‚ü®‚ü®inferInstance‚ü©‚ü©

end

def W : SSet := standardSimplex.op ‚ãô Œ© Œ±

section
open Presheaf
variable (Y)

def Œ©.CorepresentableAux‚ÇÅ :
    (Y ‚ü∂ W Œ±) ‚âÉ limit (Y.functorToRepresentables.op ‚ãô (yoneda.obj (W Œ±))) :=
  (IsoOfPreservesLimit (yoneda.obj (W Œ±)) Y).toEquiv

variable {Y' : SSet} (f : Y' ‚ü∂ Y) (g : Y ‚ü∂ W Œ±)

variable {Y} in
abbrev Œ©.Corepresentable_compAux (G : SSet·µí·µñ ‚•§ Type u) :
  limit ((functorToRepresentables Y).op ‚ãô G) ‚ü∂
    limit ((functorToRepresentables Y').op ‚ãô G) :=
  limit.pre _ (CategoryOfElements.map f).op.op

variable {Œ± Y} in
lemma Œ©.CorepresentableAux‚ÇÅ_comp_apply :
    (CorepresentableAux‚ÇÅ Œ± Y') (f ‚â´ g) =
      Corepresentable_compAux f _ ((CorepresentableAux‚ÇÅ Œ± Y) g) :=
  congrFun (IsoOfPreservesLimit_comp_hom (yoneda.obj (W Œ±)) f) g

def Œ©.CorepresentableAux‚ÇÇ :
    (functorToRepresentables Y).op ‚ãô (yoneda.obj (W Œ±)) ‚âÖ
      (functorToRepresentables Y).op ‚ãô Œ© Œ± := by
  refine NatIso.ofComponents (fun x ‚Ü¶ (yonedaEquiv _ _).toIso) ?_
  intro x y f; ext a; simp
  erw [‚Üê yonedaEquiv_naturality_left]
  rfl

variable {Œ± Y} in
lemma Œ©.CorepresentableAux‚ÇÇ_comp : (CorepresentableAux‚ÇÇ Œ± Y').hom =
  whiskerLeft (CategoryOfElements.map f).op.op (CorepresentableAux‚ÇÇ Œ± Y).hom := by
    ext; simp [CorepresentableAux‚ÇÇ, NatIso.ofComponents]

def Œ©.CorepresentableAux‚ÇÉ' :
    limit ((functorToRepresentables Y).op ‚ãô (yoneda.obj (W Œ±))) ‚âÖ
      limit ((functorToRepresentables Y).op ‚ãô Œ© Œ±) :=
  lim.mapIso (Œ©.CorepresentableAux‚ÇÇ _ _)

variable {Y} in
lemma Œ©.CorepresentableAux‚ÇÉ_comp :
  Corepresentable_compAux f _ ‚â´ (CorepresentableAux‚ÇÉ' Œ± Y').hom =
    (CorepresentableAux‚ÇÉ' Œ± Y).hom ‚â´ Corepresentable_compAux f _ := by
  simp [Corepresentable_compAux, CorepresentableAux‚ÇÉ']
  apply limit.pre_naturality' (CorepresentableAux‚ÇÇ Œ± Y).hom _ (CorepresentableAux‚ÇÇ_comp f)

def Œ©.CorepresentableAux‚ÇÉ :
    limit ((functorToRepresentables Y).op ‚ãô (yoneda.obj (W Œ±))) ‚âÉ
      limit ((functorToRepresentables Y).op ‚ãô Œ© Œ±) :=
  (CorepresentableAux‚ÇÉ' _ _).toEquiv

variable {Œ± Y} in
lemma Œ©.CorepresentableAux‚ÇÉ_comp_apply (x) :
  CorepresentableAux‚ÇÉ Œ± Y' (Corepresentable_compAux f _ x) =
    Corepresentable_compAux f _ (CorepresentableAux‚ÇÉ Œ± Y x) :=
  congrFun (CorepresentableAux‚ÇÉ_comp Œ± f) x

instance : PreservesLimit (functorToRepresentables Y).op (Œ© Œ±) := by
  apply (Œ©.PreservesLimitsOfSize Œ±).preservesLimitsOfShape.preservesLimit

def Œ©.CorepresentableAux‚ÇÑ :
    limit ((functorToRepresentables Y).op ‚ãô Œ© Œ±) ‚âÉ (Œ© Œ±).obj (op Y) :=
  ((IsoOfPreservesLimit (Œ© Œ±) Y).symm).toEquiv

variable {Œ± Y} in
lemma Œ©.CorepresentableAux‚ÇÑ_comp_apply (x) :
  CorepresentableAux‚ÇÑ Œ± Y' (Corepresentable_compAux f _ x) =
    (Œ© Œ±).map f.op (CorepresentableAux‚ÇÑ Œ± Y x) :=
  (congrFun (IsoOfPreservesLimit_comp_inv (Œ© Œ±) f) x).symm

end

def Œ©.Corepresentable : (Œ© Œ±).CorepresentableBy  (op (W Œ±)) where
  homEquiv {Y} := equivToOpposite.symm.trans ((CorepresentableAux‚ÇÅ _ (unop Y)).trans
    ((CorepresentableAux‚ÇÉ _ (unop Y)).trans (CorepresentableAux‚ÇÑ _ (unop Y))))
  homEquiv_comp {Y Y'} g f := by
    dsimp [equivToOpposite]
    erw [CorepresentableAux‚ÇÅ_comp_apply, CorepresentableAux‚ÇÉ_comp_apply,
         CorepresentableAux‚ÇÑ_comp_apply]
    rfl

def Œ©.Corepresentable.app (X : SSet.{u}):
    (X ‚ü∂ (W Œ±)) ‚âÉ (Œ© Œ±).obj (op X) :=
  Opposite.equivToOpposite.trans ((Œ©.Corepresentable Œ±).homEquiv (Y := op X))

namespace Œ©
variable {X : SSet.{u}} {Œ±}

def toHom (a : (Œ© Œ±).obj (op X)) : X ‚ü∂ W Œ± := (Œ©.Corepresentable.app Œ± X).invFun a

def toObj (f : X ‚ü∂ W Œ±) : (Œ© Œ±).obj (op X) := (Œ©.Corepresentable.app Œ± X).toFun f

@[simp]
lemma Corepresentable.homEquiv_apply {X : SSet·µí·µñ} (f : op (W Œ±) ‚ü∂ X):
    (Œ©.Corepresentable Œ±).homEquiv f = toObj f.unop := rfl

@[simp]
lemma Corepresentable.homEquiv_symm_apply {X : SSet·µí·µñ} (a : (Œ© Œ±).obj X) :
    (Œ©.Corepresentable Œ±).homEquiv.symm a = (toHom a).op := rfl

@[simp]
lemma toHom_toObj (f : X ‚ü∂ W Œ±) :
    toHom (toObj f) = f := (Œ©.Corepresentable.app Œ± X).left_inv _

@[simp]
lemma toObj_toHom (a : (Œ© Œ±).obj (op X)) :
    toObj (toHom a) = a := (Œ©.Corepresentable.app Œ± X).right_inv _

open standardSimplex

lemma toObj.simplex {n : ‚Ñï} (f : Œî[n] ‚ü∂ W Œ±) :
    toObj f = yonedaEquiv _ _ f := by
  change (CorepresentableAux‚ÇÑ Œ± Œî[n]) ((CorepresentableAux‚ÇÉ Œ± Œî[n])
      ((CorepresentableAux‚ÇÅ Œ± Œî[n]) f)) =
    IsoOfPreservesLimitOfPi _ (fun j ‚Ü¶ (CorepresentableAux‚ÇÇ Œ± Œî[n]).hom.app _
      (IsoOfPreservesLimitToPi (yoneda.obj (W Œ±)) f j))
  rw [IsoOfPreservesLimitToPi_fac_apply]
  conv => rhs; congr; ext; rw [‚Üê PiWhiskerRight_naturality_apply _ (Œ© Œ±)]
  erw [limitToPi_fac_apply]
  rfl

end Œ©
abbrev UniSmallWO‚ÇÄ := Œ©.toObj (ùüô (W Œ±))

abbrev UniSmallWO := Quotient.out $ (equivShrink (Œ©_obj‚ÇÄ Œ± (W Œ±))).symm (UniSmallWO‚ÇÄ Œ±)

lemma UniSmallWO.Œ©_obj_mk : Œ©_obj.mk (UniSmallWO Œ±) = UniSmallWO‚ÇÄ Œ± := by
  simp only [Œ©_obj.mk, UniSmallWO, Quotient.out_eq, Equiv.apply_symm_apply]

abbrev W' := (UniSmallWO Œ±).of

abbrev UniWO : W' Œ± ‚ü∂‚Çí W Œ± := (UniSmallWO Œ±).wo

variable {Œ±}

lemma Œ©.Corepresentable.universal (f : X ‚ü∂ W Œ±) :
    toObj f = (Œ© Œ±).map (op f) (UniSmallWO‚ÇÄ Œ±) :=
  (Œ©.Corepresentable Œ±).homEquiv_comp (op f) (ùüô _)

lemma UniSmallWO.universal (g : SmallWO Œ± X) :
    g ‚âà  (UniSmallWO Œ±).pullback (Œ©.toHom (Œ©_obj.mk g)):= by
  rw [‚Üê Quotient.eq_iff_equiv]
  apply_fun equivShrink (Œ©_obj‚ÇÄ Œ± _)
  change Œ©_obj.mk _ = Œ©_obj.mk _
  rw [‚Üê Œ©_map.mk_eq]
  convert Œ©.Corepresentable.universal (Œ©.toHom (Œ©_obj.mk g))
  . simp only [Œ©.toObj_toHom]
  . apply UniSmallWO.Œ©_obj_mk

-- `Œ•` defined as subtype of `Œ©`

abbrev SmallWO.Kan (f : SmallWO Œ± Y) : Prop := KanFibration f.hom

lemma Kan.sound (f g : SmallWO Œ± Y) :
    f ‚âà g ‚Üí f.Kan = g.Kan := by
  intro ‚ü®h‚ÇÅ‚ü©
  simp only [SmallWO.Kan, SmallWO.hom, eq_iff_iff]
  constructor
  . rw [‚Üê (Iso.inv_comp_eq _).mpr h‚ÇÅ.comm]
    apply KanFibration.isIso_comp
  . rw [h‚ÇÅ.comm]
    apply KanFibration.isIso_comp

lemma Kan.sound_iff (f g : SmallWO Œ± Y) :
    f ‚âà g ‚Üí (f.Kan ‚Üî g.Kan) := by
  rw [‚Üê eq_iff_iff]
  exact Kan.sound f g

def Œ©_obj.Kan : Œ©_obj Œ± Y ‚Üí Prop :=
  Shrink.rec $ Quotient.lift SmallWO.Kan Kan.sound

lemma SmallWO.Kan_iff_Œ©_obj_mk_Kan (a : SmallWO Œ± Y) :
    a.Kan ‚Üî (Œ©_obj.mk a).Kan := by
  simp only [Shrink.rec, Œ©_obj.mk, Œ©_obj.Kan, Equiv.symm_apply_apply,
    Quotient.lift_mk, eq_rec_constant]

lemma Œ©_obj.Kan_iff_pullback_toHom_Kan :
    ‚àÄ a : Œ©_obj Œ± Y, a.Kan ‚Üî ( (UniSmallWO Œ±).pullback (Œ©.toHom a)).Kan := by
    apply Shrink.rec
    apply Quotient.ind
    intro a
    erw [‚Üê SmallWO.Kan_iff_Œ©_obj_mk_Kan]
    exact Kan.sound_iff _ _ (UniSmallWO.universal a)

lemma Œ©_obj.Kan_iff_pullback_snd_toHom_Kan (a : Œ©_obj Œ± Y) :
    a.Kan ‚Üî KanFibration (pullback.snd (UniSmallWO Œ±).hom (Œ©.toHom a)) := by
  rw [Kan_iff_pullback_toHom_Kan]; rfl

-- Greek `Œ•`, not latin `Y`
variable (Œ± Y) in
abbrev Œ•_obj := {a : Œ©_obj Œ± Y // a.Kan}

def Œ•_obj.mk (a : SmallWO Œ± Y) (ha : a.Kan) : Œ•_obj Œ± Y :=
  ‚ü®Œ©_obj.mk a, a.Kan_iff_Œ©_obj_mk_Kan.mp ha‚ü©

lemma Œ©_map.Kan : ‚àÄ (a : Œ©_obj Œ± Y), a.Kan ‚Üí (Œ©_map Œ± f a).Kan := by
  apply Shrink.rec
  apply Quotient.ind
  intro a
  erw [Œ©_map.mk_eq, ‚Üê SmallWO.Kan_iff_Œ©_obj_mk_Kan, ‚Üê SmallWO.Kan_iff_Œ©_obj_mk_Kan]
  simp only [SmallWO.Kan, SmallWO.pullback, SmallWO.hom]
  apply KanFibration.pullback_snd

variable (Œ±) in
def Œ•_map (f : Y' ‚ü∂ Y) : Œ•_obj Œ± Y ‚ü∂ Œ•_obj Œ± Y' :=
  Subtype.map (Œ©_map Œ± f) (Œ©_map.Kan)

lemma Œ•_map_id : Œ•_map Œ± (ùüô Y) = ùüô (Œ•_obj Œ± Y) := by
  ext _ : 2
  simp [Œ•_map, Œ©_map_id]

lemma Œ•_map_comp {f : Y ‚ü∂ Y'} {g : Y' ‚ü∂ Y''}:
    (Œ•_map Œ± g) ‚â´ (Œ•_map Œ± f) = Œ•_map Œ± (f ‚â´ g) := by
  ext _ : 2
  simp [Œ•_map, ‚Üê Œ©_map_comp]

variable (Œ±)

def Œ• : SSet·µí·µñ ‚•§ Type u where
  obj Y := Œ•_obj Œ± (unop Y)
  map f := Œ•_map Œ± (unop f)
  map_id Y := by simp; rw [‚Üê Œ•_map_id]; rfl
  map_comp f g:= by simp; rw [Œ•_map_comp]; rfl

def U : SSet := standardSimplex.op ‚ãô Œ• Œ±

def Œ•.toŒ© : Œ• Œ± ‚ü∂ Œ© Œ± where
  app n a := a.val

def U.toW : U Œ± ‚ü∂ W Œ± := NatTrans.id (standardSimplex.op) ‚ó´ Œ•.toŒ© Œ±

variable {Œ±} in
lemma U.toW.app_eq_val {k} (x : (U Œ±).obj k) :
    (U.toW Œ±).app _ x = x.val := by
  simp only [U.toW, FunctorToTypes.hcomp, NatTrans.id_app', FunctorToTypes.map_id_apply]
  rfl

instance U.toW.mono : Mono (U.toW Œ±) where
  right_cancellation {Z} g h hyp := by
    ext k a
    apply_fun fun f ‚Ü¶ f.app k a at hyp
    erw [NatTrans.vcomp_app, NatTrans.vcomp_app] at hyp
    simp [app_eq_val] at hyp
    rwa [‚Üê Subtype.val_inj]

abbrev UniSmallWOKan‚ÇÄ := Œ©_map Œ± (U.toW Œ±) (UniSmallWO‚ÇÄ Œ±)

abbrev UniSmallWOKan := Quotient.out $ (equivShrink (Œ©_obj‚ÇÄ Œ± (U Œ±))).symm (UniSmallWOKan‚ÇÄ Œ±)

variable {Œ±}
lemma UniSmallWOKan‚ÇÄ.eq_toObj : UniSmallWOKan‚ÇÄ Œ± = Œ©.toObj (U.toW Œ±) :=
  (Œ©.Corepresentable.universal _).symm

lemma UniSmallWOKan‚ÇÄ.toHom : Œ©.toHom (UniSmallWOKan‚ÇÄ Œ±) = U.toW Œ± := by
  rw [eq_toObj, Œ©.toHom_toObj]

lemma UniSmallWOKan.Œ©_obj_mk : Œ©_obj.mk (UniSmallWOKan Œ±) = UniSmallWOKan‚ÇÄ Œ± := by
  simp only [Œ©_obj.mk, UniSmallWO, Quotient.out_eq, Equiv.apply_symm_apply]

lemma UniSmallWOKan.equiv_smallWO_pullback :
    UniSmallWOKan Œ± ‚âà  (UniSmallWO Œ±).pullback (U.toW Œ±):= by
  rw [‚Üê Quotient.eq_iff_equiv, Quotient.out_eq]
  apply_fun (equivShrink (Œ©_obj‚ÇÄ Œ± (U Œ±)))
  simp only [Equiv.apply_symm_apply, UniSmallWOKan‚ÇÄ,
      ‚Üê UniSmallWO.Œ©_obj_mk, Œ©_map.mk_eq]
  rfl

variable (Œ±)
abbrev U' := (UniSmallWOKan Œ±).of

abbrev UniWOKan : U' Œ± ‚ü∂‚Çí U Œ± := (UniSmallWOKan Œ±).wo

variable {Œ±}

lemma U.toW.simplex_comp_eq_toHom_val {k : ‚Ñï} (œÉ : Œî[k] ‚ü∂ U Œ±):
    œÉ ‚â´ U.toW Œ± = Œ©.toHom (((U Œ±).yonedaEquiv [k]) œÉ).val := by
  rw [‚Üê app_eq_val, yonedaEquiv_naturality_right, ‚Üê Œ©.toObj.simplex, Œ©.toHom_toObj]

lemma U.toW.Kan_pullback_snd_simplex_comp {k : ‚Ñï} (œÉ : Œî[k] ‚ü∂ U Œ±) :
    KanFibration (pullback.snd (UniWO Œ±).hom (œÉ ‚â´ U.toW Œ±)) := by
  have := (yonedaEquiv _ _ œÉ).property
  rwa [Œ©_obj.Kan_iff_pullback_snd_toHom_Kan, ‚Üê simplex_comp_eq_toHom_val] at this

lemma U.Kan_pullback_snd_simplex : ‚àÄ {k : ‚Ñï} (œÉ : Œî[k] ‚ü∂ U Œ±),
    KanFibration (pullback.snd (UniWOKan Œ±).hom œÉ) := by
  intro k œÉ
  have := toW.Kan_pullback_snd_simplex_comp œÉ
  rw [‚Üê pullback.rightCompIso_hom_comp_snd] at this
  apply KanFibration.of_isIso_comp at this
  obtain ‚ü®h‚ü© := UniSmallWOKan.equiv_smallWO_pullback (Œ± := Œ±)
  have comm : (UniWOKan Œ±).hom =
    h.toIso.hom ‚â´ (pullback.snd (UniWO Œ±).hom (U.toW Œ±)) := h.comm
  rw [comm, ‚Üê pullback.leftCompIso_hom_comp_snd, ‚Üê Category.assoc]
  apply KanFibration.isIso_comp -- Lean has the instance that pullback.snd of iso is iso

instance UniWOKan.hom.KanFibration : KanFibration (UniWOKan Œ±).hom :=
  KanFibration.of_forall_pullback_snd_KanFibration U.Kan_pullback_snd_simplex

instance UniWOKan.hom.KanFibration' :
    SSet.KanFibration (pullback.snd (UniSmallWO Œ±).hom (U.toW Œ±)) := by
  have := Kan.sound_iff _ _ (UniSmallWOKan.equiv_smallWO_pullback (Œ± := Œ±))
  dsimp [SmallWO.Kan, SmallWO.pullback, SmallWO.hom] at this
  rw [‚Üê this]
  exact UniWOKan.hom.KanFibration

lemma UniSmallWOKan.Kan : (UniSmallWOKan Œ±).Kan :=
  UniWOKan.hom.KanFibration

lemma UniSmallWOKan‚ÇÄ.Kan : (UniSmallWOKan‚ÇÄ Œ±).Kan := by
  rw [‚Üê UniSmallWOKan.Œ©_obj_mk, ‚Üê SmallWO.Kan_iff_Œ©_obj_mk_Kan]
  exact UniSmallWOKan.Kan

variable (Œ±) in
abbrev Œ•_obj.UniSmallWOKan‚ÇÄ : Œ•_obj Œ± (U Œ±) :=
  ‚ü®SSet.UniSmallWOKan‚ÇÄ Œ±, UniSmallWOKan‚ÇÄ.Kan‚ü©

lemma factor_iff_forall_Kan (f : Y ‚ü∂ W Œ±) :
    (‚àÉ œÜ, f = œÜ ‚â´ U.toW Œ±) ‚Üî (‚àÄ ‚¶Ék‚¶Ñ (x : Y _[k]), (f.app _ x).Kan) := by
  constructor
  . intro ‚ü®œÜ, h‚ü© k x
    rw [h, Œ©_obj.Kan_iff_pullback_snd_toHom_Kan,
        yonedaEquiv_symm_naturality_right, ‚Üê Œ©.toObj.simplex, Œ©.toHom_toObj,
        ‚Üê Category.assoc, ‚Üê yonedaEquiv_symm_naturality_right']
    apply U.toW.Kan_pullback_snd_simplex_comp
  . intro h
    use {
      app := fun n y ‚Ü¶ ‚ü®f.app _ y, h (k := n.unop.len) y‚ü©
      naturality := by
        intro _ _ _; ext _; apply Subtype.ext
        change (Y.map _ ‚â´ f.app _) _ = _
        rw [f.naturality]
        rfl
    }
    ext n y; erw [NatTrans.vcomp_app]
    simp [U.toW, Œ•.toŒ©]

lemma SmallWO.Kan_iff_factor :
    a.Kan ‚Üî ‚àÉ œÜ, Œ©.toHom (Œ©_obj.mk a)  = œÜ ‚â´ U.toW Œ± := by
  rw [SmallWO.Kan_iff_Œ©_obj_mk_Kan, Œ©_obj.Kan_iff_pullback_snd_toHom_Kan]
  constructor
  . rw [factor_iff_forall_Kan]; intro h k x
    rw [yonedaEquiv_symm_naturality_right, Œ©_obj.Kan_iff_pullback_snd_toHom_Kan,
        ‚Üê Œ©.toObj.simplex, Œ©.toHom_toObj, ‚Üê pullback.rightCompIso_hom_comp_snd]
    apply KanFibration.isIso_comp' _ _ KanFibration.pullback_snd
  . intro ‚ü®œÜ, h‚ü©
    rw [h, ‚Üê pullback.rightCompIso_hom_comp_snd]
    apply KanFibration.isIso_comp' _ _ KanFibration.pullback_snd

lemma Œ©_obj.Kan_iff_factor : ‚àÄ a : Œ©_obj Œ± Y, a.Kan ‚Üî ‚àÉ œÜ, Œ©.toHom a  = œÜ ‚â´ U.toW Œ± := by
  apply Shrink.rec
  apply Quotient.ind
  intro a
  convert a.Kan_iff_factor
  exact (SmallWO.Kan_iff_Œ©_obj_mk_Kan _).symm

lemma Œ©_obj.Kan_toObj_comp {f : X ‚ü∂ U Œ±} :
    (Œ©.toObj (f ‚â´ U.toW Œ±)).Kan := by
  rw [Kan_iff_factor, Œ©.toHom_toObj]
  use f

open Classical

def Œ©_obj.Kan_choose_factor (a : Œ©_obj Œ± Y) (ha : a.Kan):
    Y ‚ü∂ U Œ± := choose (a.Kan_iff_factor.mp ha)

lemma Œ©_obj.Kan_choose_factor_spec (a : Œ©_obj Œ± Y) (ha : a.Kan):
    Œ©.toHom a  = a.Kan_choose_factor ha ‚â´ U.toW Œ± := choose_spec (a.Kan_iff_factor.mp ha)

variable (Œ±) in
def Œ•.Corepresentable : (Œ• Œ±).CorepresentableBy  (op (U Œ±)) where
  homEquiv {Y} :={
    toFun := fun f ‚Ü¶ ‚ü®(Œ©.Corepresentable Œ±).homEquiv ((U.toW Œ±).op ‚â´ f), by
      simp only [Œ©.Corepresentable.homEquiv_apply, unop_comp, Quiver.Hom.unop_op]
      apply Œ©_obj.Kan_toObj_comp‚ü©
    invFun := fun a ‚Ü¶ (a.val.Kan_choose_factor a.property).op
    left_inv := by
      intro f; rw [‚Üê Quiver.Hom.unop_inj.eq_iff]; simp
      rw [‚Üê cancel_mono (U.toW Œ±), ‚Üê Œ©_obj.Kan_choose_factor_spec, Œ©.toHom_toObj]
    right_inv := by
      intro a; apply Subtype.ext; simp
      rw [‚Üê Œ©_obj.Kan_choose_factor_spec, Œ©.toObj_toHom]
  }
  homEquiv_comp {Y Y'} g f := by
    apply Subtype.ext; simp [Œ•, Œ•_map]
    apply (Œ©.Corepresentable Œ±).homEquiv_comp g _

namespace Œ•

variable (Œ±) in
def Corepresentable.app (X : SSet.{u}):
    (X ‚ü∂ (U Œ±)) ‚âÉ (Œ• Œ±).obj (op X) :=
  Opposite.equivToOpposite.trans ((Œ•.Corepresentable Œ±).homEquiv (Y := op X))

def toHom (a : (Œ• Œ±).obj (op X)) : X ‚ü∂ U Œ± := (Corepresentable.app Œ± X).invFun a

def toObj (f : X ‚ü∂ U Œ±) : (Œ• Œ±).obj (op X) := (Corepresentable.app Œ± X).toFun f

@[simp]
lemma Corepresentable.homEquiv_apply {X : SSet·µí·µñ} (f : op (U Œ±) ‚ü∂ X):
    (Corepresentable Œ±).homEquiv f = toObj f.unop := rfl

@[simp]
lemma Corepresentable.homEquiv_symm_apply {X : SSet·µí·µñ} (a : (Œ• Œ±).obj X) :
    (Corepresentable Œ±).homEquiv.symm a = (toHom a).op := rfl

@[simp]
lemma toHom_toObj (f : X ‚ü∂ U Œ±) :
    toHom (toObj f) = f := (Corepresentable.app Œ± X).left_inv _

@[simp]
lemma toObj_toHom (a : (Œ• Œ±).obj (op X)) :
    toObj (toHom a) = a := (Corepresentable.app Œ± X).right_inv _

lemma Corepresentable.universal (f : X ‚ü∂ U Œ±) :
    toObj f = (Œ• Œ±).map (op f) (Œ•_obj.UniSmallWOKan‚ÇÄ Œ±) := by
  convert (Œ•.Corepresentable Œ±).homEquiv_comp (op f) (ùüô _)
  apply Subtype.ext; simp
  rw [UniSmallWOKan‚ÇÄ.eq_toObj]
  rfl

end Œ•

lemma UniSmallWOKan.universal‚ÇÄ (g : SmallWO Œ± X) (hg : g.Kan) :
    Œ•_obj.mk g hg = Œ•_obj.mk ((UniSmallWOKan Œ±).pullback (Œ•.toHom (Œ•_obj.mk g hg)))
        KanFibration.pullback_snd := by
  convert Œ•.Corepresentable.universal (Œ•.toHom (Œ•_obj.mk g hg))
  . simp only [Œ•.toObj_toHom]
  . apply Subtype.ext
    simp only [Œ•_obj.mk, Œ•, Œ•_map, op_obj, op_map, Subtype.map_coe,  ‚Üê Œ©_obj_mk,
      Œ©_map.mk_eq]

lemma UniSmallWOKan.universal (g : SmallWO Œ± X) (hg : g.Kan) :
    g ‚âà  (UniSmallWOKan Œ±).pullback (Œ•.toHom (Œ•_obj.mk g hg)):= by
  rw [‚Üê Quotient.eq_iff_equiv]
  apply_fun equivShrink (Œ©_obj‚ÇÄ Œ± _)
  exact congrArg Subtype.val (universal‚ÇÄ g hg)

end
end SSet
