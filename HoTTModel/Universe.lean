import HoTTModel.Contextual
import Mathlib.CategoryTheory.Limits.Shapes.CommSq

noncomputable section

/-
open CategoryTheory CategoryTheory.Limits Fin

universe u v
namespace ContextualCategory

structure Universe (Œ± : Type u) [CategoryTheory.Category.{v, u} Œ±] where
  obj : Œ±
  obj' : Œ±
  map : obj' ‚ü∂ obj
  pb {X} (f : X ‚ü∂ obj) : Œ±
  pb_vmap {X} (f : X ‚ü∂ obj) : pb f ‚ü∂ X
  pb_hmap {X} (f : X ‚ü∂ obj) : pb f ‚ü∂ obj'
  comm {f : X ‚ü∂ obj} : pb_vmap f ‚â´ f =  pb_hmap f ‚â´ map
  is_pullback {f : X ‚ü∂ obj} : IsLimit <| PullbackCone.mk (pb_vmap f) (pb_hmap f) comm

variable {Œ± : Type u} [CategoryTheory.Category.{v, u} Œ±]


structure Chain (U : Universe Œ±) (X : Œ±) (n : ‚Ñï) where
  obj (i : Fin (n + 1) ) : Œ±
  map (i : Fin (n + 1) ) : obj i ‚ü∂ U.obj
  coh‚ÇÄ : X = obj 0
  coh (i : Fin n) : U.pb (map (castSucc i)) = obj (succ i)

abbrev Pb {Œ± : Type u} [CategoryTheory.Category.{v, u} Œ±] {U : Universe Œ±} {X : Œ±} {n : ‚Ñï} (C : Chain U X n) : Œ± :=

variable (U : Universe Œ±) (t : Œ±) (ht : IsTerminal t)

def PreChainCat := Œ£ n : ‚Ñï, Chain U t n
/-
namespace PreChainCat
variable {U : Universe Œ±} {t : Œ±}

@[simp]
def Hom (x : PreChainCat U t) (y : PreChainCat U t) := (Pb x.snd) ‚ü∂ (Pb y.snd)

@[simp]
def comp {x y z : PreChainCat U t} : (Pb x.snd ‚ü∂ Pb y.snd) ‚Üí (Pb y.snd ‚ü∂ Pb z.snd) ‚Üí (Pb x.snd ‚ü∂ Pb z.snd) := @CategoryStruct.comp _ _ (Pb x.snd) (Pb y.snd) (Pb z.snd)

instance : Category (PreChainCat U t) where
  Hom := Hom
  id x := ùüô (Pb x.snd)
  comp := comp
  id_comp := by simp
  comp_id := by simp
  assoc := by simp

end PreChainCat
-/
inductive ChainCat (U : Universe Œ±) (t : Œ±)
  | of : PreChainCat U t ‚Üí ChainCat U t
  | one : ChainCat U t

namespace ChainCat

variable {U : Universe Œ±} {t : Œ±}
@[simp]

def Hom : ChainCat U t ‚Üí ChainCat U t ‚Üí Type v
  | of x, of y => (Pb x.snd) ‚ü∂ (Pb y.snd)
  | one, of y => t ‚ü∂ (Pb y.snd)
  | one, one => t ‚ü∂ t
  | of x, one => (Pb x.snd) ‚ü∂ t

@[simp]
def id : ‚àÄ X : ChainCat U t, Hom X X
  | of _ => ùüô _
  | one => ùüô t

@[simp]
def comp : ‚àÄ {X Y Z : ChainCat U t}, Hom X Y ‚Üí Hom Y Z ‚Üí Hom X Z
  | of _X, of _Y, of _Z => fun f g => f ‚â´ g
  | of _X, _, one => fun _f _g => PUnit.unit
  | one, of _X, of _Y => fun f g => f ‚â´ g
  | one, _, one => fun _ _ => PUnit.unit
  | one, one, of _Y => by sorry
  | of _X, one, of _Y => by sorry



#exit

/-
open Sum in
instance : Category (ChainUni U t) where
  Hom
    | inl x, inr y => t ‚ü∂ (Pb y.snd)
    | inl x, inl y => t ‚ü∂ t
    | inr x, inl y => (Pb x.snd) ‚ü∂ t
    | inr x, inr y => (Pb x.snd) ‚ü∂ (Pb y.snd)
  id
    | inl x => ùüô t
    | inr x => ùüô (Pb x.snd)
  comp := _
  id_comp := _
  comp_id := _
  assoc := _
-/




/-
abbrev Mor := Œ£ x : Œ±, Œ£ y : Œ±, x ‚ü∂ y

abbrev dom {Œ± : Type u} [CategoryTheory.Category.{v, u} Œ±] : Mor Œ± ‚Üí Œ± := fun f ‚Ü¶ f.fst

abbrev cod {Œ± : Type u} [CategoryTheory.Category.{v, u} Œ±] : Mor Œ± ‚Üí Œ± := fun f ‚Ü¶ f.snd.fst

structure Chain {Œ±} [CategoryTheory.Category Œ±] (U : Universe Œ±) (X : Œ±) (n : ‚Ñï) where
  maps : Fin (n + 1) ‚Üí Mor Œ±
  cod (i : Fin (n +1)) : cod (maps i) = U.obj
  dom‚ÇÄ : dom (maps 0) = X
  dom (i : Fin n) : dom (maps (succ i)) = pb
-/
-/


open CategoryTheory CategoryTheory.Limits Fin List

universe u v
/-
structure Universe (C : Type u) [CategoryTheory.Category.{v, u} C] where
  obj : C
  obj' : C
  map : obj' ‚ü∂ obj
  pb {X} (f : X ‚ü∂ obj) : Œ±
  pb_vmap {X} (f : X ‚ü∂ obj) : pb f ‚ü∂ X
  pb_hmap {X} (f : X ‚ü∂ obj) : pb f ‚ü∂ obj'
  comm {f : X ‚ü∂ obj} : pb_vmap f ‚â´ f =  pb_hmap f ‚â´ map
  is_pullback {f : X ‚ü∂ obj} : IsLimit <| PullbackCone.mk (pb_vmap f) (pb_hmap f) comm

namespace Universe
-/
structure Universe (C : Type u) [CategoryTheory.Category.{v, u} C] where
  obj : C
  obj' : C
  map : obj' ‚ü∂ obj
  pt {X} (f : X ‚ü∂ obj) : Œ±
  fst {X} (f : X ‚ü∂ obj) : pt f ‚ü∂ obj'
  snd {X} (f : X ‚ü∂ obj) : pt f ‚ü∂ X
  pullback (f : X ‚ü∂ obj) : IsPullback (fst f) (snd f) map f
namespace Universe

variable {C : Type u} [CategoryTheory.Category.{v, u} C] [HasBinaryProducts C] {t : C} (ht : IsTerminal t)

abbrev Proj‚ÇÅ (U : Universe C): prod U.obj U.obj' ‚ü∂ U.obj := prod.fst

abbrev Proj‚ÇÇ (U : Universe C): prod U.obj U.obj' ‚ü∂ U.obj' := prod.snd

abbrev From (U : Universe C) : U.obj ‚ü∂ t := IsTerminal.from ht _

end Universe
