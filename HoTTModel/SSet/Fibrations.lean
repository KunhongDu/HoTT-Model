import HoTTModel.SSet.Lemmas

open CategoryTheory Simplicial Limits SimplexCategory Function Opposite Classical

noncomputable section

namespace SSet

variable {C : Type*} [Category C]

variable {X Y : SSet}

class KanFibration (p : X ‚ü∂ Y) : Prop where
  lift : ‚àÄ ‚¶Én : ‚Ñï‚¶Ñ ‚¶Éi : Fin (n+1)‚¶Ñ {f} {g} (D : CommSq f (hornInclusion n i) p g),
    Nonempty D.LiftStruct

def KanFibration.LiftStruct {p : X ‚ü∂ Y} [KanFibration p] {n} {i} {f} {g}
(D : CommSq f (hornInclusion n i) p g) : D.LiftStruct := choice (KanFibration.lift D)

-- this is a general statement
namespace KanFibration
open standardSimplex
lemma iff_is_KanComplex (X : SSet) :
  KanFibration X.toŒî0 ‚Üî X.KanComplex := by
  constructor
  . intro h; constructor; intro n i œÉ‚ÇÄ
    have D : CommSq œÉ‚ÇÄ (hornInclusion n i) X.toŒî0 (Œî[n]).toŒî0 := ‚ü®unique_toŒî0 _ _‚ü©
    set L := LiftStruct D
    exact ‚ü®L.l, L.fac_left.symm‚ü©
  . intro h; constructor; intro n i f g D
    rcases KanComplex.hornFilling f with ‚ü®œÉ, hœÉ‚ü©
    use œÉ; exact hœÉ.symm; apply unique_toŒî0

lemma of_isIso (p : X ‚ü∂ Y) [IsIso p] : KanFibration p := ‚ü®by
  intro n i f g D
  use (g ‚â´ inv p)
  rw [‚Üê Category.assoc, IsIso.comp_inv_eq, D.w]
  simp only [Category.assoc, IsIso.inv_hom_id, Category.comp_id]
  ‚ü©

instance (p : X ‚ü∂ Y) [IsIso p] : KanFibration p := of_isIso p

-- TODO : retract

lemma IsPullback_snd {W X Y Z : SSet} {fst : W ‚ü∂ X} {snd : W ‚ü∂ Y}
  {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z} (P : IsPullback fst snd f g) [KanFibration f] :
    KanFibration snd := ‚ü®by
  intro n i h h' D
  have D' : CommSq (h ‚â´ fst) (hornInclusion _ _) f (h' ‚â´ g) :=
    ‚ü®by rw [Category.assoc, P.w, ‚Üê Category.assoc, D.w, Category.assoc]‚ü©
  use P.lift (LiftStruct D').l h' (LiftStruct _).fac_right
  . apply P.hom_ext
    . simp only [Category.assoc, IsPullback.lift_fst, (LiftStruct _).fac_left]
    . simp only [Category.assoc, IsPullback.lift_snd, D.w]
  . simp only [IsPullback.lift_snd]‚ü©

instance pullback_snd {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z} [KanFibration f] :
    KanFibration (pullback.snd f g) :=
  IsPullback_snd (IsPullback.of_hasPullback f g)

lemma pullback_snd' {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z} (_ : KanFibration f) :
    KanFibration (pullback.snd f g) :=
  IsPullback_snd (IsPullback.of_hasPullback f g)

lemma IsPullback_fst {W X Y Z : SSet} {fst : W ‚ü∂ X} {snd : W ‚ü∂ Y}
  {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z} (P : IsPullback fst snd f g) [KanFibration g] :
    KanFibration fst := ‚ü®(IsPullback_snd P.flip).lift‚ü©

instance pullback_fst {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z} [KanFibration g] :
    KanFibration (pullback.fst f g) :=
  IsPullback_fst (IsPullback.of_hasPullback f g)

lemma pullback_fst' {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z} (_ : KanFibration g) :
    KanFibration (pullback.fst f g) :=
  IsPullback_fst (IsPullback.of_hasPullback f g)

lemma of_forall_pullback_snd_KanFibration {f : X ‚ü∂ S}
  (h : ‚àÄ {k}, ‚àÄ œÉ : Œî[k] ‚ü∂ S, KanFibration (pullback.snd f œÉ)) :
    KanFibration f := ‚ü®by
      intro n i g g' D
      specialize h g'
      have D' : CommSq (pullback.lift (f := f) (g := g') g (hornInclusion _ _) D.w)
        (hornInclusion _ _) (pullback.snd _ _) (ùüô _) := ‚ü®by simp‚ü©
      use (LiftStruct D').l ‚â´ pullback.fst _ _
      . rw [‚Üê Category.assoc, (LiftStruct D').fac_left, pullback.lift_fst]
      . rw [Category.assoc, pullback.condition, ‚Üê Category.assoc,
            (LiftStruct D').fac_right, Category.id_comp]
    ‚ü©

lemma comp (p : X ‚ü∂ Y) [KanFibration p] (q : Y ‚ü∂ Z) [KanFibration q] :
  KanFibration (p ‚â´ q) := ‚ü®by
    intro n i f g D
    have D‚ÇÅ : CommSq (f ‚â´ p) (hornInclusion n i) q g := ‚ü®by simp [D.w]‚ü©
    have D‚ÇÇ : CommSq f (hornInclusion n i) p (LiftStruct D‚ÇÅ).l :=
      ‚ü®(LiftStruct _).fac_left.symm‚ü©
    use (LiftStruct D‚ÇÇ).l
    exact (LiftStruct D‚ÇÇ).fac_left
    rw [‚Üê Category.assoc, (LiftStruct _).fac_right, (LiftStruct _).fac_right]‚ü©

lemma isIso_comp {X Y Z : SSet} (f : X ‚ü∂ Y) [IsIso f] (g : Y ‚ü∂ Z) [KanFibration g] :
    KanFibration (f ‚â´ g) := comp _ _

lemma comp_isIso {X Y Z : SSet} (f : X ‚ü∂ Y) [KanFibration f] (g : Y ‚ü∂ Z) [IsIso g]:
    KanFibration (f ‚â´ g) := comp _ _

lemma isIso_comp' {X Y Z : SSet} (f : X ‚ü∂ Y) [IsIso f] (g : Y ‚ü∂ Z) (_ : KanFibration g) :
    KanFibration (f ‚â´ g) := comp _ _

lemma comp_isIso' {X Y Z : SSet} (f : X ‚ü∂ Y) (_ : KanFibration f) (g : Y ‚ü∂ Z) [IsIso g]:
    KanFibration (f ‚â´ g) := comp _ _

lemma of_isIso_comp {X Y Z : SSet} (f : X ‚ü∂ Y) [IsIso f]
  (g : Y ‚ü∂ Z) (h : KanFibration (f ‚â´ g)) :
    KanFibration g := by
  rw [‚Üê Category.id_comp g, ‚Üê IsIso.inv_hom_id f, Category.assoc]
  apply isIso_comp

lemma of_comp_isIso {X Y Z : SSet} (f : X ‚ü∂ Y)
  (g : Y ‚ü∂ Z)  [IsIso g] (h : KanFibration (f ‚â´ g)):
    KanFibration f := by
  rw [‚Üê Category.comp_id f, ‚Üê IsIso.hom_inv_id g, ‚Üê Category.assoc]
  apply comp_isIso

-- toDo, rw hg to Epi or sujective???
lemma of_pullback_snd_KanFibration_of_surjective {W X Y Z : SSet} {fst : W ‚ü∂ X} {snd : W ‚ü∂ Y}
  {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z} (P : IsPullback fst snd f g) [KanFibration snd]
  (hg : ‚àÄ {k}, ‚àÄ œÉ : Œî[k] ‚ü∂ Z, ‚àÉ œÉ' : Œî[k] ‚ü∂ Y, œÉ' ‚â´ g = œÉ) :
    KanFibration f := by
  apply of_forall_pullback_snd_KanFibration
  intro k œÉ
  obtain ‚ü®œÉ', hœÉ‚ü© := hg œÉ
  rw [‚Üê hœÉ]
  have : KanFibration (pullback.snd f g) := by
    set œÜ := IsLimit.conePointUniqueUpToIso P.isLimit (limit.isLimit (cospan f g))
    have : œÜ.hom ‚â´ pullback.snd f g = snd :=
      IsLimit.conePointUniqueUpToIso_hom_comp _ _ WalkingCospan.right
    rw [‚Üê Iso.eq_inv_comp] at this
    rw [this]
    apply isIso_comp
  rw [‚Üê pullback.rightCompIso_hom_comp_snd]
  apply isIso_comp

-- TODO : KanFib : to KanCpx

-- TrivialKanFibration aka Acyclic ...
-- avoid using weak equivalence / simplicial homotopy group

class TrivialKanFibration (p : X ‚ü∂ Y) : Prop where
  lift : ‚àÄ ‚¶Én : ‚Ñï‚¶Ñ {f} {g} (D : CommSq f p (boundaryInclusion n) g), Nonempty D.LiftStruct

#exit
-- minimal fibration

def ProdŒî0 : X ‚âÖ prod X Œî[0] := prod_terminal_iso Œî0_is_terminal

def inc‚ÇÄ : X ‚ü∂ prod X Œî[1] := ProdŒî0.hom ‚â´ (prod.lift prod.fst <| prod.snd ‚â´ standardSimplex.map (Œ¥ 1))

def inc‚ÇÅ : X ‚ü∂ prod X Œî[1] := ProdŒî0.hom ‚â´ (prod.lift prod.fst <| prod.snd ‚â´ standardSimplex.map (Œ¥ 0))

structure FibrewiseHomotopy {X Y : SSet} (p : X ‚ü∂ Y) (e e' : Œî[n] ‚ü∂ X) where
  bound : (boundaryInclusion n) ‚â´ e = (boundaryInclusion n) ‚â´ e'
  comp : e ‚â´ p = e' ‚â´ p
  htp : prod Œî[n] Œî[1] ‚ü∂ X
  res‚ÇÄ : inc‚ÇÄ ‚â´ htp = e
  res‚ÇÅ : inc‚ÇÅ ‚â´ htp = e'

class KanFibration.Minimal (p : X ‚ü∂ Y) [KanFibration p] : Prop where
  eq_of : ‚àÄ ‚¶Én : ‚Ñï‚¶Ñ (e e' : Œî[n] ‚ü∂ X), (FibrewiseHomotopy p e e') ‚Üí e = e'



open KanFibration

structure FactorMiniTrivial (p : X ‚ü∂ Y) [KanFibration p] where
  mid : SSet
  to_mid : X ‚ü∂ mid
  kan‚ÇÅ : KanFibration to_mid
  mini : Minimal to_mid
  from_mid : mid ‚ü∂ Y
  tri : TrivialKanFibration from_mid

class Cofibration (f : X ‚ü∂ Y) : Prop :=
  inj : ‚àÄ ‚¶Én : ‚Ñï‚¶Ñ, Injective (f.app (op [n]))

end SSet
end
