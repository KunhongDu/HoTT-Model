import Mathlib.CategoryTheory.Elements

namespace CategoryTheory
open Opposite

universe u v w
variable {C : Type u} [Category.{v, u} C]

section

def uliftWhiskering.{w‚ÇÅ, w‚ÇÇ} : (C ‚•§ Type w‚ÇÅ) ‚•§ (C ‚•§ Type (max w‚ÇÅ w‚ÇÇ)) :=
  (whiskeringRight _ _ _).obj uliftFunctor.{w‚ÇÇ, w‚ÇÅ}

def yonedaULift : C ‚•§ C·µí·µñ ‚•§ Type max v w := yoneda ‚ãô uliftWhiskering

variable {F : C·µí·µñ ‚•§ Type (max v w)} {X Y : C}

def yonedaULiftEquiv :
    (yonedaULift.obj X ‚ü∂ F) ‚âÉ F.obj (op X) :=
  yonedaCompUliftFunctorEquiv _ _

lemma yonedaULiftEquiv_apply (f : yonedaULift.obj X ‚ü∂ F):
    yonedaULiftEquiv f = f.app (op X) (ULift.up (ùüô _)) := rfl

lemma yonedaULiftEquiv_yonedaULift_apply (f : X ‚ü∂ Y) :
    yonedaULiftEquiv (yonedaULift.map f) = ULift.up f := by
  rw [yonedaULiftEquiv_apply]
  simp [yonedaULift, uliftWhiskering]

lemma yonedaCompUliftFunctorEquiv_naturality (f : yoneda.obj X ‚ãô uliftFunctor.{w, v} ‚ü∂ F)
  (g : Y ‚ü∂ X) :
    F.map g.op (yonedaCompUliftFunctorEquiv _ _ f) =
      yonedaCompUliftFunctorEquiv _ _ ((yoneda ‚ãô uliftWhiskering).map g ‚â´ f) := by
  change (f.app (op X) ‚â´ F.map g.op) (ULift.up (ùüô X)) = f.app (op Y) (ULift.up (ùüô Y ‚â´ g))
  -- why this kind of display
  /-
    (f.app { unop := X } ‚â´ F.map g.op) { down := ùüô X } = f.app { unop := Y } { down := ùüô Y ‚â´ g }
  -/
  rw [‚Üê f.naturality]; simp

lemma yonedaULiftEquiv_naturality (f : yonedaULift.obj X ‚ü∂ F) (g : Y ‚ü∂ X) :
    F.map g.op (yonedaULiftEquiv f) =
      yonedaULiftEquiv (yonedaULift.map g ‚â´ f) :=
  yonedaCompUliftFunctorEquiv_naturality _ _

lemma yonedaULiftEquiv_symm_naturality (x : F.obj (op X)) (g : Y ‚ü∂ X):
    yonedaULiftEquiv.symm (F.map g.op x) =
      yonedaULift.map g ‚â´ yonedaULiftEquiv.symm x := by
  apply yonedaULiftEquiv.injective
  simp [‚Üê yonedaULiftEquiv_naturality]

lemma yonedaULiftEquiv_comp {F G : C·µí·µñ ‚•§ Type max w v} {X : C}
  (Œ± : yonedaULift.obj X ‚ü∂ F) (Œ≤ : F ‚ü∂ G) :
    yonedaULiftEquiv (Œ± ‚â´ Œ≤) = Œ≤.app _ (yonedaULiftEquiv Œ±) :=
  rfl

lemma yonedaULiftEquiv_symm_comp {F G : C·µí·µñ ‚•§ Type max w v} {X : C} (x : F.obj (op X)) (Œ≤ : F ‚ü∂ G) :
    yonedaULiftEquiv.symm x ‚â´ Œ≤ = yonedaULiftEquiv.symm (Œ≤.app _ x) := by
  apply yonedaULiftEquiv.injective
  simp [yonedaULiftEquiv_comp]

end

section

variable (F : C·µí·µñ ‚•§ Type (max v w))

namespace CategoryOfElements

#check toCostructuredArrow
@[simps]
def toCostructuredArrowULift (F : C·µí·µñ ‚•§ Type max v w) :
    F.Elements·µí·µñ ‚•§ CostructuredArrow yonedaULift F where
  obj X := CostructuredArrow.mk (yonedaULiftEquiv.symm (unop X).2)
  map {X Y} f := by
    apply CostructuredArrow.homMk (f.unop.val.unop) _
    ext Z y
    dsimp only [CostructuredArrow.mk_right, Functor.const_obj_obj,
      CostructuredArrow.mk_left, CostructuredArrow.mk_hom_eq_self]
    rw [‚Üê yonedaULiftEquiv_symm_naturality]
    simp [f.unop.2]

#check fromCostructuredArrow
@[simps]
def fromCostructuredArrowULift :
    (CostructuredArrow yonedaULift F)·µí·µñ ‚•§ F.Elements where
  obj X := ‚ü®op (unop X).1, yonedaULiftEquiv (unop X).3‚ü©
  map {X Y} f :=
    ‚ü®f.unop.1.op, by dsimp; rw [yonedaULiftEquiv_naturality, f.unop.3]; rfl‚ü©

@[simp]
theorem fromCostructuredArrowULift_obj_mk {X : C} (f : yonedaULift.obj X ‚ü∂ F) :
    (fromCostructuredArrowULift F).obj (op (CostructuredArrow.mk f)) = ‚ü®op X, yonedaULiftEquiv f‚ü© :=
  rfl

#check costructuredArrowYonedaEquivalence
def costructuredArrowYonedaEquivalenceULift :
    F.Elements·µí·µñ ‚âå CostructuredArrow yonedaULift F where
  functor := toCostructuredArrowULift F
  inverse := (fromCostructuredArrowULift F).rightOp
  unitIso := by
    apply NatIso.ofComponents _ _
    . exact fun X ‚Ü¶ Iso.op (CategoryOfElements.isoMk _ _ (Iso.refl _) (by simp))
    . intro X Y f; apply Quiver.Hom.unop_inj (by ext; simp)
  counitIso := NatIso.ofComponents (fun X ‚Ü¶ CostructuredArrow.isoMk (Iso.refl _))

end CategoryOfElements
