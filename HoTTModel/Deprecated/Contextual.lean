import Mathlib.CategoryTheory.Limits.Shapes.Terminal
import Mathlib.CategoryTheory.Limits.Shapes.Pullback.CommSq

open CategoryTheory CategoryTheory.Limits

class PreContextualCategory (Œ± : Type*) where
  Cat : Category Œ±
  gr : Œ± ‚Üí ‚Ñï
  one : Œ±
  one_gr : gr one = 0
  one_uniq {x} : gr x = 0 ‚Üí x = one
  one_terminal : IsTerminal one
  ft : Œ± ‚Üí Œ±
  ft_one : ft one = one
  ft_gr {n : ‚Ñï} (x : Œ±): gr x = n + 1 ‚Üí gr (ft x) = n
  proj (x : Œ±) : x ‚ü∂ ft x

open PreContextualCategory

-- NR = not root -- maybe change `one` to `root`??
class NR {Œ± : Type*} [PreContextualCategory Œ±] (x : Œ±) : Prop :=
  nr : gr x ‚â† 0

lemma nr_of_NR {Œ± : Type*} [PreContextualCategory Œ±] (x : Œ±) [h : NR x]: gr x ‚â† 0 := h.nr

class ContextualCategory (Œ± : Type*) extends PreContextualCategory Œ± where
  pb {x y : Œ±} [NR x] (f : y ‚ü∂ ft x) : Œ±
  pb_map {x y : Œ±} [NR x] (f : y ‚ü∂ ft x) : pb f ‚ü∂ x
  gr_pb {x y : Œ±} [NR x] {f : y ‚ü∂ ft x} : gr (pb f) ‚â† 0
  nr_pb {x y : Œ±} [NR x] {f : y ‚ü∂ ft x} : NR (pb f) := ‚ü®gr_pb‚ü©
  ft_pb {x y : Œ±} [NR x] {f : y ‚ü∂ ft x} : ft (pb f) = y
  comm {x y : Œ±} [NR x] {f : y ‚ü∂ ft x} :  (proj <| pb f) ‚â´ eqToHom (ft_pb (f := f)) ‚â´ f = (pb_map f) ‚â´ proj x
  is_pullback {x y : Œ±} [NR x] {f : y ‚ü∂ ft x} : IsLimit <| PullbackCone.mk  (proj (pb f)) (pb_map f) comm
  pullback_id_obj {x : Œ±} [NR x]: pb (ùüô (ft x)) = x
  pullback_id_map {x : Œ±} [NR x] : eqToHom (@pullback_id_obj x).symm ‚â´ pb_map (ùüô (ft x)) = ùüô x
  pullback_comp_obj {x y z : Œ±} [NR x] {f : y ‚ü∂ ft x} {g : z ‚ü∂ y} : pb (g ‚â´ f) = pb (g ‚â´ eqToHom (ft_pb (f := f)).symm)
  pullback_comp_map {x y z : Œ±} [NR x] {f : y ‚ü∂ ft x} {g : z ‚ü∂ y} : pb_map (g ‚â´ f) = eqToHom (pullback_comp_obj (f := f) (g := g)) ‚â´  pb_map (g ‚â´ eqToHom (ft_pb (f := f)).symm) ‚â´ pb_map f

attribute [instance] PreContextualCategory.Cat

namespace ContextualCategory

instance initOneContext {Œ± : Type*} [ContextualCategory Œ±] : One Œ± where
  one := one

variable {Œ± : Type*} [ContextualCategory Œ±]

def Gr (n : ‚Ñï) := {x : Œ± // gr x = n}

variable {a : Œ±} {n : ‚Ñï}

def ProjChainComp (a : Œ±) : (n : ‚Ñï) ‚Üí (a ‚ü∂ ft^[n] a)
| 0 => ùüô a
| Nat.succ n => proj a ‚â´ ProjChainComp (ft a) n

structure nExt (a : Œ±) (n : ‚Ñï) where
  obj : Œ±
  ft : ft^[n] obj = a
  gr : gr obj = gr a + n

instance nExt_not_root (hn : n ‚â† 0) {e : nExt a n} : NR e.obj := ‚ü®
  by rw [e.gr, Nat.ne_zero_iff_zero_lt]; apply Nat.lt_add_left _ (Nat.zero_lt_of_ne_zero hn)‚ü©

lemma nExt_gr_le {e : nExt a n} : n ‚â§ gr e.obj := by
  rw [e.gr]
  apply Nat.le_add_left

lemma gr_ft_iterate : gr a = n + k ‚Üí gr (ft^[k] a) = n := by
  induction k generalizing a with
  | zero => simp
  | succ k ih => simp; exact fun h ‚Ü¶ (ih (a := ft a)) ((ft_gr (n:= n + k) a) h)

lemma gr_ft_iterate' (h : k ‚â§ gr a) : gr a = gr (ft^[k] a) + k := by
  rw [gr_ft_iterate (Nat.sub_add_cancel h).symm, Nat.sub_add_cancel h]

def nExtProj {a : Œ±} {n : ‚Ñï} (e : nExt a n) : e.obj ‚ü∂ a := ProjChainComp e.obj n ‚â´ eqToHom e.ft

notation "ùìÖ" e => nExtProj e

abbrev Ext (a : Œ±) := nExt a 1

abbrev dExt (a : Œ±) := nExt a 2

instance ext_not_root (b : Ext a) : NR b.obj := nExt_not_root (hn := Nat.one_ne_zero)

def indExtAbove (b : nExt a n) (i : Fin n) : nExt (ft^[i] b.obj) i where
  obj := b.obj
  ft := rfl
  gr := gr_ft_iterate' <| le_of_lt (lt_of_lt_of_le (Fin.is_lt i) nExt_gr_le)

def indExtBelow (b : nExt a n) (i : Fin n) : nExt a i where
  obj := ft^[n-i] b.obj
  ft := by simp only [‚Üê Function.iterate_add_apply, Fin.is_le', Nat.add_sub_cancel', b.ft]
  gr := by rw [‚Üê Nat.add_right_cancel_iff (n := n - ‚Üëi), ‚Üê gr_ft_iterate' (le_trans (Nat.sub_le _ _) nExt_gr_le), b.gr, Nat.add_assoc, Nat.add_left_cancel_iff, Nat.add_comm, Nat.sub_add_cancel (le_of_lt (Fin.is_lt i))]

abbrev dExtBelow1 (b : dExt a) := indExtBelow b 1

abbrev dExtAbove1 (b : dExt a) := indExtAbove b 1

def nExtExt (b : nExt a n) (c : nExt b.obj m) : nExt a (n + m) where
  obj := c.obj
  ft := by rw [Function.iterate_add, Function.comp_apply, c.ft, b.ft]
  gr := by rw [c.gr, b.gr, Nat.add_assoc]

abbrev toDExt (b : Ext a) (c : Ext b.obj) : dExt a := nExtExt b c

def PullbackExt (b : Ext a) (f : c ‚ü∂ a) : Ext c where
  obj := pb (f ‚â´ eqToHom b.ft.symm)
  ft := by simp only [Function.iterate_one]; rw [ft_pb]
  gr := by
    have : ft (pb (f ‚â´ eqToHom b.ft.symm)) = c := by rw [ft_pb]
    simp_rw [‚Üê this]
    exact gr_ft_iterate' (k := 1) <| Nat.succ_le_of_lt (Nat.ne_zero_iff_zero_lt.mp gr_pb)

abbrev Diag (b : Ext a) : b.obj ‚ü∂ (PullbackExt b (ùìÖ b)).obj := by
  apply Limits.PullbackCone.IsLimit.lift (is_pullback) (eqToHom ft_pb.symm) (ùüô b.obj)
  simp only [Category.id_comp, eqToHom_trans_assoc, eqToHom_refl]
  simp only [nExtProj, Function.iterate_succ,
    Category.assoc, eqToHom_trans, eqToHom_refl, Category.comp_id]
  simp only [ProjChainComp, Category.comp_id]

structure Section {a : Œ±} (b : nExt a n) where
  map : a ‚ü∂ b.obj
  is_section : (map ‚â´ ùìÖ b) = ùüô a

structure Over {a : Œ±} (b : nExt a m) (c : nExt a n) where
  map : b.obj ‚ü∂ c.obj
  comm : (map ‚â´ ùìÖ c) = ùìÖ b

structure Pi_type (Œ± : Type*) [ContextualCategory Œ±] where
  form (Œì : Œ±) (Œì'' : dExt Œì): Ext Œì
  intro (Œì : Œ±) (Œì'' : dExt Œì) (b : Section (dExtAbove1 Œì'')) : Section (form Œì Œì'')
  elim_tm (Œì : Œ±) (Œì'' : dExt Œì) (k : Section (form Œì Œì'')) (a : Section (dExtBelow1 Œì'')) : Section Œì''
  elim_comm (Œì : Œ±) (Œì'' : dExt Œì) (k : Section (form Œì Œì'')) (a : Section (dExtBelow1 Œì'')) : ((elim_tm Œì Œì'' k a).1 ‚â´ ùìÖ(dExtAbove1 Œì'')) = a.map
  comp (Œì : Œ±) (Œì'' : dExt Œì) (a : Section (dExtBelow1 Œì'')) (b : Section (dExtAbove1 Œì'')) : (elim_tm Œì Œì'' (intro Œì Œì'' b) a).map = a.map ‚â´ b.map
  -- stable

structure Sigma_type (Œ± : Type*) [ContextualCategory Œ±] where
  form (Œì : Œ±) (Œì'' : dExt Œì): Ext Œì
  intro (Œì : Œ±) (Œì'' : dExt Œì) : Over Œì'' (form Œì Œì'')
  elim_tm (Œì : Œ±) (Œì'' : dExt Œì) (C : Ext (form Œì Œì'').obj) (d : Œì''.obj ‚ü∂ C.obj) (hd : (d ‚â´ ùìÖ C) = (intro Œì Œì'').map) : Section C
  elim_comm  (Œì : Œ±) (Œì'' : dExt Œì) (C : Ext (form Œì Œì'').obj) (d : Œì''.obj ‚ü∂ C.obj) (hd : (d ‚â´ ùìÖ C) = (intro Œì Œì'').map) : (intro Œì Œì'').map ‚â´ (elim_tm Œì Œì'' C d hd).map = d
  -- stable

structure Id_type (Œ± : Type*) [ContextualCategory Œ±] where
  form (Œì : Œ±) (Œì' : Ext Œì) : Ext (PullbackExt Œì' (ùìÖ Œì')).obj
  elim_tm (Œì : Œ±) (Œì' : Ext Œì) : Œì'.obj ‚ü∂ (form Œì Œì').obj
  elim_comm (Œì : Œ±) (Œì' : Ext Œì) : (elim_tm Œì Œì' ‚â´ ùìÖ (form Œì Œì')) = Diag Œì'
  comp_tm (Œì : Œ±) (Œì' : Ext Œì) (C : Ext (form Œì Œì').obj) (d : Œì'.obj ‚ü∂ C.obj) (hd : (d ‚â´ ùìÖ C) = elim_tm Œì Œì') : Section C
  comp_comm (Œì : Œ±) (Œì' : Ext Œì) (C : Ext (form Œì Œì').obj) (d : Œì'.obj ‚ü∂ C.obj) (hd : (d ‚â´ ùìÖ C) = elim_tm Œì Œì') : elim_tm Œì Œì' ‚â´ (comp_tm Œì Œì' C d hd).map = d

structure Zero_type (Œ± : Type*) [ContextualCategory Œ±] where
  form (Œì : Œ±) : Ext Œì
  elim_tm {Œì : Œ±} (Œì' : Ext (form Œì).obj) : Section Œì'

structure Unit_type (Œ± : Type*) [ContextualCategory Œ±] where
  form (Œì : Œ±) : Ext Œì
  intro (Œì : Œ±) : Section (form Œì)
  elim_tm {Œì : Œ±} (Œì' : Ext (form Œì).obj) (d : Section (toDExt (form Œì) Œì')) (hd : (d.map ‚â´ ùìÖ Œì') = (intro Œì).map) : Section Œì'
  elim_comm {Œì : Œ±} (Œì' : Ext (form Œì).obj) (d : Section (toDExt (form Œì) Œì')) (hd : (d.map ‚â´ ùìÖ Œì') = (intro Œì).map) : (intro Œì).map ‚â´ (elim_tm Œì' d hd).map = d.map
  --stable

structure Sum_type (Œ± : Type*) [ContextualCategory Œ±] where
  form (Œì : Œ±) (Œì‚ÇÅ Œì‚ÇÇ: Ext Œì) : Ext Œì
  intro‚ÇÅ (Œì : Œ±) (Œì‚ÇÅ Œì‚ÇÇ: Ext Œì) : Œì‚ÇÅ.obj ‚ü∂ (form Œì Œì‚ÇÅ Œì‚ÇÇ).obj
  intro‚ÇÇ (Œì : Œ±) (Œì‚ÇÅ Œì‚ÇÇ: Ext Œì) : Œì‚ÇÇ.obj ‚ü∂ (form Œì Œì‚ÇÅ Œì‚ÇÇ).obj
  elim_tm (Œì : Œ±) (Œì‚ÇÅ Œì‚ÇÇ: Ext Œì) (C : Ext (form Œì Œì‚ÇÅ Œì‚ÇÇ).obj) (d‚ÇÅ : Œì‚ÇÅ.obj ‚ü∂ C.obj) (d‚ÇÇ : Œì‚ÇÇ.obj ‚ü∂ C.obj) (hd‚ÇÅ: (d‚ÇÅ ‚â´ ùìÖ C) = intro‚ÇÅ Œì Œì‚ÇÅ Œì‚ÇÇ) (hd‚ÇÇ: (d‚ÇÇ ‚â´ ùìÖ C) = intro‚ÇÇ Œì Œì‚ÇÅ Œì‚ÇÇ) : Section C
  elim_comm‚ÇÅ (Œì : Œ±) (Œì‚ÇÅ Œì‚ÇÇ: Ext Œì) (C : Ext (form Œì Œì‚ÇÅ Œì‚ÇÇ).obj) (d‚ÇÅ : Œì‚ÇÅ.obj ‚ü∂ C.obj) (d‚ÇÇ : Œì‚ÇÇ.obj ‚ü∂ C.obj) (hd‚ÇÅ: (d‚ÇÅ ‚â´ ùìÖ C) = intro‚ÇÅ Œì Œì‚ÇÅ Œì‚ÇÇ) (hd‚ÇÇ: (d‚ÇÇ ‚â´ ùìÖ C) = intro‚ÇÇ Œì Œì‚ÇÅ Œì‚ÇÇ) : intro‚ÇÅ Œì Œì‚ÇÅ Œì‚ÇÇ ‚â´ (elim_tm Œì Œì‚ÇÅ Œì‚ÇÇ C d‚ÇÅ d‚ÇÇ hd‚ÇÅ hd‚ÇÇ).map = d‚ÇÅ
  elim_comm‚ÇÇ (Œì : Œ±) (Œì‚ÇÅ Œì‚ÇÇ: Ext Œì) (C : Ext (form Œì Œì‚ÇÅ Œì‚ÇÇ).obj) (d‚ÇÅ : Œì‚ÇÅ.obj ‚ü∂ C.obj) (d‚ÇÇ : Œì‚ÇÇ.obj ‚ü∂ C.obj) (hd‚ÇÅ: (d‚ÇÅ ‚â´ ùìÖ C) = intro‚ÇÅ Œì Œì‚ÇÅ Œì‚ÇÇ) (hd‚ÇÇ: (d‚ÇÇ ‚â´ ùìÖ C) = intro‚ÇÇ Œì Œì‚ÇÅ Œì‚ÇÇ) : intro‚ÇÇ Œì Œì‚ÇÅ Œì‚ÇÇ ‚â´ (elim_tm Œì Œì‚ÇÅ Œì‚ÇÇ C d‚ÇÅ d‚ÇÇ hd‚ÇÅ hd‚ÇÇ).map = d‚ÇÇ
