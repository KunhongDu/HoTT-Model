import HoTTModel.LocallyCartesianClosed.ChosenPullbacks
import HoTTModel.Universe

noncomputable section

open CategoryTheory Limits List LocallyCartesianClosed

variable {C : Type u} [CategoryTheory.Category.{v, u} C]
-- binary product follows from pullback + terminal object, but I'll assume this instance for now

namespace Universe
variable (U : Universe C)
set_option linter.unusedSectionVars false

section
variable [HasFiniteWidePullbacks C] [LocallyCartesianClosed C] {X : C} (f : X ‚ü∂ U.down)
/-
@[simp]
def isoPullback :
    U.pt f ‚âÖ pullback U.hom f :=
  (U.isPullback f).isoPullback

@[simp]
def isoPullback_flip :
    U.pt f ‚âÖ pullback f U.hom :=
  (U.isPullback f).flip.isoPullback

def isoPullback.map :
    Over (U.pt f) ‚•§ Over (pullback U.hom f) :=
  Over.map (U.isoPullback f).hom

def isoPullback.map_inv :
    Over (pullback U.hom f) ‚•§  Over (U.pt f) :=
  Over.map (U.isoPullback f).inv

section
variable {X Y: C} {fst : Y ‚ü∂ U.up} {snd : Y ‚ü∂ X} {f : X ‚ü∂ U.down}
  (is : IsPullback fst snd U.hom f)

@[simp]
def isoIsPullback : Y ‚âÖ U.pt f :=
  is.isoIsPullback _ _ (U.isPullback f)

@[simp]
def isoOverSnd :
    Over.mk snd ‚âÖ U.snd' f :=
  Over.isoMk ((is.isoIsPullback _ _ (U.isPullback f)))

@[simp]
def isoOverFst :
    Over.mk fst ‚âÖ U.fst' f :=
  Over.isoMk (is.isoIsPullback _ _ (U.isPullback f))

end

section
-- pullback along universe

@[simp]
def fst'_isoPullback :
    U.fst' f ‚âÖ  (U.hom*).obj (Over.mk f) :=
  Over.isoMk (U.isoPullback_flip f) (U.isPullback f).flip.isoPullback_hom_snd

@[simps]
def pullback_map : Over U.down ‚•§ Over U.up where
  obj f := U.fst' f.hom
  map {f g} h := (U.fst'_isoPullback f.hom).hom ‚â´ (U.hom)*.map h ‚â´
      (U.fst'_isoPullback g.hom).inv
  map_id f := by
    ext; simp [fst'_isoPullback, isoPullback_flip]
    apply (U.isPullback f.hom).flip.hom_ext
    <;> simp [Universe.isoPullback]
  map_comp f g := by ext; simp

variable {U} in
lemma pullback_map.map_left_eq_lift {X Y : Over U.down} (f : X ‚ü∂ Y) :
    (U.pullback_map.map f).left =
      (U.isPullback Y.hom).lift (U.fst X.hom) (U.snd X.hom ‚â´ f.left)
        (by simp only [(U.isPullback X.hom).w, Category.assoc, Over.w]) := by
  apply (U.isPullback Y.hom).hom_ext
  <;> simp [fst'_isoPullback, isoPullback_flip]

@[simp, reassoc]
lemma pullback_map.map_fst {X Y : Over U.down} (f : X ‚ü∂ Y) :
    (U.pullback_map.map f).left ‚â´ U.fst Y.hom = U.fst X.hom := by
  simp [fst'_isoPullback, isoPullback_flip]

def pullback_map.upperSquareIsPullback {X Y : Over U.down} (f : X ‚ü∂ Y) :
    IsPullback (U.pullback_map.map f).left (U.snd X.hom) (U.snd Y.hom) f.left := by
  apply IsPullback.of_right _ _ (U.isPullback Y.hom)
  . convert U.isPullback X.hom
    . simp [fst'_isoPullback, isoPullback_flip]
    . exact Over.w f
  . rw [map_left_eq_lift, IsPullback.lift_snd]

def pullback_mapIsoPullback : U.pullback_map ‚âÖ Over.pullback U.hom where
  hom :={
    app := fun f ‚Ü¶ (U.fst'_isoPullback f.hom).hom
    naturality := by intros; simp
  }
  inv := {
    app := fun f ‚Ü¶ (U.fst'_isoPullback f.hom).inv
    naturality := by intros; simp
  }
  hom_inv_id := by ext; simp
  inv_hom_id := by ext; simp

def pullback_adj := (adj U.hom).ofNatIsoLeft U.pullback_mapIsoPullback.symm

abbrev pullback_adjEquiv := U.pullback_adj.homEquiv

lemma pullback_adj.homEquiv_naturality_right
  {X : Over U.down} {Y Y' : Over U.up} (f : U.pullback_map.obj X ‚ü∂ Y) (g : Y ‚ü∂ Y') :
    (U.pullback_adj.homEquiv X Y') (f ‚â´ g) = (U.pullback_adj.homEquiv X Y) f ‚â´ (Œ†U.hom).map g :=
  U.pullback_adj.homEquiv_naturality_right f g

lemma pullback_adj.homEquiv_naturality_right_symm
  {X : Over U.down} {Y Y' : Over U.up} (f : X ‚ü∂ (Œ†U.hom).obj Y) (g : Y ‚ü∂ Y') :
    (U.pullback_adj.homEquiv X Y').symm (f ‚â´ (Œ†U.hom).map g) =
      (U.pullback_adj.homEquiv X Y).symm f ‚â´ g :=
  U.pullback_adj.homEquiv_naturality_right_symm f g

end
/-
def fst_homEquiv (g : Over U.up) :
    (U.fst' f ‚ü∂ g) ‚âÉ ((U.hom*).obj (Over.mk f) ‚ü∂ g) :=
  (U.fst'_isoPullback f).homFromEquiv


variable {f} in
lemma fst_homEquiv_naturality {g h : Over U.up} (i : U.fst' f ‚ü∂ g) (j : g ‚ü∂ h) :
    U.fst_homEquiv f h (i ‚â´ j) =  U.fst_homEquiv f g i ‚â´ j := by
  simp only [fst_homEquiv, Iso.homFromEquiv_apply, Category.assoc]

def fst_adjEquiv (g : Over U.up) :
    (U.fst' f ‚ü∂ g) ‚âÉ ((Over.mk f) ‚ü∂ (Œ†(U.hom)).obj g) :=
  (U.fst_homEquiv f g).trans ((adj U.hom).homEquiv (Over.mk f) g)

lemma fst_adjEquiv_naturality {g h : Over U.up} (i : U.fst' f ‚ü∂ g) (j : g ‚ü∂ h) :
    U.fst_adjEquiv f h (i ‚â´ j) = U.fst_adjEquiv f g i ‚â´ (Œ†(U.hom)).map j := by
  simp only [fst_adjEquiv, Equiv.trans_apply]
  rw [U.fst_homEquiv_naturality i j]
  exact Adjunction.homEquiv_naturality_right _ _ _

lemma fst_adjEquiv_naturality_symm {g h : Over U.up} (i : Over.mk f ‚ü∂ (Œ†(U.hom)).obj g)
  (j : g ‚ü∂ h) :
    (U.fst_adjEquiv f h).symm (i ‚â´ (Œ†(U.hom)).map j) = (U.fst_adjEquiv f _).symm i ‚â´ j := by
  simp only [Equiv.symm_apply_eq, fst_adjEquiv_naturality,
    eq_self_iff_true, Equiv.apply_symm_apply]

-/

/-
section snd
-- pullback of universe

def snd'_isoPullback :
    U.snd' f ‚âÖ  (f*).obj U.over :=
  Over.isoMk (U.isoPullback f) (U.isPullback f).isoPullback_hom_snd

def snd_homEquiv (g : Over X) :
    (U.snd' f ‚ü∂ g) ‚âÉ ((f*).obj U.over ‚ü∂ g) :=
  (U.snd'_isoPullback f).homFromEquiv

variable {f} in
lemma snd_homEquiv_naturality {g h : Over X} (i : U.snd' f ‚ü∂ g) (j : g ‚ü∂ h) :
    U.snd_homEquiv f h (i ‚â´ j) =  U.snd_homEquiv f g i ‚â´ j := by
  simp only [snd_homEquiv, Iso.homFromEquiv_apply, Category.assoc]

def snd_adjEquiv (g : Over X) :
    (U.snd' f ‚ü∂ g) ‚âÉ (U.over ‚ü∂ (Œ†f).obj g) :=
  (U.snd_homEquiv f g).trans ((adj f).homEquiv U.over g)

lemma snd_adjEquiv_naturality {g h : Over X} (i : U.snd' f ‚ü∂ g) (j : g ‚ü∂ h) :
    U.snd_adjEquiv f h (i ‚â´ j) = U.snd_adjEquiv f g i ‚â´ (Œ†f).map j := by
  simp only [snd_adjEquiv, Equiv.trans_apply]
  rw [U.snd_homEquiv_naturality i j]
  exact Adjunction.homEquiv_naturality_right _ _ _

lemma snd_adjEquiv_naturality_symm {g h : Over X} (i : U.over ‚ü∂ (Œ†f).obj g) (j : g ‚ü∂ h) :
    (U.snd_adjEquiv f h).symm (i ‚â´ (Œ†f).map j) = (U.snd_adjEquiv f _).symm i ‚â´ j := by
  simp only [Equiv.symm_apply_eq, snd_adjEquiv_naturality,
    eq_self_iff_true, Equiv.apply_symm_apply]

end snd
-/

section
-- pullback as a functor along
/-
`   pt ‚Üí U.up  `
`    ‚Üì      ‚Üì   `
`Y ‚Üí X ‚Üí U.down`
-/

variable {Y : C} (g : Y ‚ü∂ X)

def isPullbackComp :
    IsPullback ((U.isPullback f).lift (U.fst (g ‚â´ f)) (U.snd (g ‚â´ f) ‚â´ g) (by simp [U.comm]))
      (U.snd (g ‚â´ f)) (U.snd f) g := by
  apply IsPullback.of_right (t := U.isPullback f)
  . convert U.isPullback (g ‚â´ f)
    simp only [IsPullback.lift_fst]
  . simp only [IsPullback.lift_snd]

def pullbackSnd'_isoPullback :
    U.pt (g ‚â´ f) ‚âÖ  pullback (U.snd f) g :=
  (U.isPullbackComp f g).isoPullback

def pullbackSnd'_isoPullback_snd' :
    U.snd' (g ‚â´ f) ‚âÖ  (g*).obj (U.snd' f) :=
  Over.isoMk (U.pullbackSnd'_isoPullback f g) (U.isPullbackComp f g).isoPullback_hom_snd

end
-/
namespace Pi
variable [HasBinaryProducts C] {t : C} (ht : IsTerminal t)

abbrev op := (Œ†(U.hom)).obj U.proj‚ÇÇ'

abbrev obj := (op U).left

abbrev hom : obj U ‚ü∂ U.down := (op U).hom

abbrev gen‚ÇÅ : C := U.pt (hom U)

abbrev gen‚ÇÅ_fst : gen‚ÇÅ U ‚ü∂ U.up := U.fst (hom U)

abbrev gen‚ÇÅ_snd : gen‚ÇÅ U ‚ü∂ obj U := U.snd (hom U)

abbrev gen‚ÇÅ_fst' : Over U.up := U.fst' (hom U)

abbrev gen‚ÇÅ_snd' : Over (obj U) := U.snd' (hom U)

abbrev gen‚ÇÇ_hom‚ÇÄ : gen‚ÇÅ_fst' U ‚ü∂ U.proj‚ÇÇ' :=
  (IsPullback.adjEquiv (U.isPullback (hom U)).flip _).symm (ùüô _)

lemma gen‚ÇÇ_hom‚ÇÄ_comp_prod_snd :
    (gen‚ÇÇ_hom‚ÇÄ U).left ‚â´ prod.snd = gen‚ÇÅ_fst U :=
  Over.w (gen‚ÇÇ_hom‚ÇÄ U)

abbrev gen‚ÇÇ_hom : gen‚ÇÅ U ‚ü∂ U.down := (gen‚ÇÇ_hom‚ÇÄ U).left ‚â´ U.proj‚ÇÅ

abbrev gen‚ÇÇ_hom' : Over U.down := Over.mk (gen‚ÇÇ_hom U)

abbrev Gen‚ÇÇ : C := U.pt (gen‚ÇÇ_hom U)

abbrev gen‚ÇÇ_fst : Gen‚ÇÇ U ‚ü∂ U.up := U.fst (gen‚ÇÇ_hom U)

abbrev gen‚ÇÇ_snd : Gen‚ÇÇ U ‚ü∂ gen‚ÇÅ U := U.snd (gen‚ÇÇ_hom U)

abbrev gen‚ÇÇ_fst' : Over U.up := U.fst' (gen‚ÇÇ_hom U)

abbrev gen‚ÇÇ_snd' : Over (gen‚ÇÅ U) := U.snd' (gen‚ÇÇ_hom U)

structure Structure where
  hom : (op U).left ‚ü∂ U.down
  iso : (Œ†(gen‚ÇÅ_snd U)).obj (gen‚ÇÇ_snd' U) ‚âÖ U.snd' hom

abbrev Structure.fst (S : Structure U) : ((Œ†(gen‚ÇÅ_snd U)).obj (gen‚ÇÇ_snd' U)).left ‚ü∂ U.up :=
  S.iso.hom.left ‚â´ U.fst S.hom

lemma Structure.isPullback (S : Structure U) :
    IsPullback S.fst ((Œ†(gen‚ÇÅ_snd U)).obj (gen‚ÇÇ_snd' U)).hom U.hom S.hom := by
  apply (U.isPullback S.hom).of_iso ((Over.forget _).mapIso S.iso.symm)
    (Iso.refl _) (Iso.refl _) (Iso.refl _)
  all_goals simp [fst]
  rw [‚Üê Over.comp_left_assoc, Iso.inv_hom_id, Over.id_left, Category.id_comp]

-- the iso means, we would later need to do pullback along `gen‚ÇÅ_snd`
-- but since the `gen‚ÇÅ_snd` is a pullback of the universe
-- we can choose the pullbacks as ones along compositions!!!!

section
/-
variable {U} {Œì A : C} (Œ¥ : Œì ‚ü∂ U.down) (Œ¥' : U.pt Œ¥ ‚ü∂ U.down)

def form‚ÇÄ' : Over.mk Œ¥ ‚ü∂ op U :=
  IsPullback.adjEquiv (U.isPullback Œ¥).flip _ (Over.homMk (prod.lift Œ¥' (U.fst Œ¥)))

abbrev form‚ÇÄ : Œì ‚ü∂ obj U := (form‚ÇÄ' Œ¥ Œ¥').left

lemma form‚ÇÄ_comp_hom : form‚ÇÄ Œ¥ Œ¥' ‚â´ hom U = Œ¥ := by
  simp only [Over.w, Over.mk_hom]

def form‚ÇÅ' : U.fst' Œ¥ ‚ü∂ gen‚ÇÅ_fst' U := by
  apply

abbrev form‚ÇÅ : U.pt Œ¥ ‚ü∂ gen‚ÇÅ U := (form‚ÇÅ' Œ¥ Œ¥').left

lemma form‚ÇÅ'_comp_Gen‚ÇÇhom‚ÇÄ :
    form‚ÇÅ' Œ¥ Œ¥' ‚â´ gen‚ÇÇ_hom‚ÇÄ U = Over.homMk (prod.lift Œ¥' (U.fst Œ¥)) := by
  erw [‚Üê U.pullback_adj.homEquiv_counit]
  simp [form‚ÇÄ', Equiv.symm_apply_apply]

@[reassoc]
lemma form‚ÇÅ_comp_Gen‚ÇÇhom‚ÇÄ_left :
    form‚ÇÅ Œ¥ Œ¥' ‚â´ (gen‚ÇÇ_hom‚ÇÄ U).left = prod.lift Œ¥' (U.fst Œ¥) :=
  congrArg CommaMorphism.left (form‚ÇÅ'_comp_Gen‚ÇÇhom‚ÇÄ Œ¥ Œ¥')

lemma form‚ÇÅ_comp_Gen‚ÇÇhom :
    form‚ÇÅ Œ¥ Œ¥' ‚â´ gen‚ÇÇ_hom U = Œ¥' := by
  simp [gen‚ÇÇ_hom, ‚Üê Category.assoc, form‚ÇÅ_comp_Gen‚ÇÇhom‚ÇÄ_left]

lemma form‚ÇÅ_comp_fst :
    form‚ÇÅ Œ¥ Œ¥' ‚â´ gen‚ÇÅ_fst U = U.fst Œ¥ := by
  rw [‚Üê gen‚ÇÇ_hom‚ÇÄ_comp_prod_snd, form‚ÇÅ_comp_Gen‚ÇÇhom‚ÇÄ_left_assoc, prod.lift_snd]

abbrev form‚ÇÅ'' : Over.mk Œ¥' ‚ü∂ gen‚ÇÇ_hom' U :=
  Over.homMk (form‚ÇÅ Œ¥ Œ¥') (form‚ÇÅ_comp_Gen‚ÇÇhom _ _)

def form‚ÇÇ' : U.fst' Œ¥' ‚ü∂ gen‚ÇÇ_fst' U := U.pullback_map.map (form‚ÇÅ'' Œ¥ Œ¥')

abbrev form‚ÇÇ : U.pt Œ¥' ‚ü∂ Gen‚ÇÇ U := (form‚ÇÇ' Œ¥ Œ¥').left

lemma form‚ÇÇ_comp_fst :
    form‚ÇÇ Œ¥ Œ¥' ‚â´ U.fst (gen‚ÇÇ_hom U) = U.fst Œ¥' :=
  pullback_map.map_fst _ _

def form‚ÇÅ.isPullback :
    IsPullback (form‚ÇÅ Œ¥ Œ¥') (U.snd Œ¥) (gen‚ÇÅ_snd U) (form‚ÇÄ Œ¥ Œ¥') :=
  pullback_map.upperSquareIsPullback _ (form‚ÇÄ' Œ¥ Œ¥')

def form‚ÇÇ.isPullback :
    IsPullback (form‚ÇÇ Œ¥ Œ¥') (U.snd Œ¥') (gen‚ÇÇ_snd U) (form‚ÇÅ Œ¥ Œ¥') :=
  pullback_map.upperSquareIsPullback _ (form‚ÇÅ'' Œ¥ Œ¥')

lemma form‚ÇÄ'_ext‚ÇÅ (f : Over.mk Œ¥ ‚ü∂ op U)
  (hf : (U.pullback_map.map f).left ‚â´ gen‚ÇÇ_hom U = Œ¥') :
    f = form‚ÇÄ' Œ¥ Œ¥' := by
  simp [form‚ÇÄ']
  apply_fun (U.pullback_adjEquiv _ _).symm
  rw [U.pullback_adj.homEquiv_counit]
  ext; apply Limits.prod.hom_ext
  . simp [‚Üê hf]
  . have : (U.pullback_map.map f).left ‚â´ (gen‚ÇÇ_hom‚ÇÄ U).left ‚â´ prod.snd = U.fst Œ¥ := by
      simp only [pullback_map.map_left_eq_lift, gen‚ÇÇ_hom‚ÇÄ_comp_prod_snd,
        Over.mk_hom, IsPullback.lift_fst]
    simp; conv_rhs => rw [‚Üê this]
    simp

end
-/

variable {U} {Œì A B : C} {Œ¥ : Œì ‚ü∂ U.down} {Œ≥ : A ‚ü∂ U.up} {œÄ : A ‚ü∂ Œì}
  {Œ¥' : A ‚ü∂ U.down} {Œ≥' : B ‚ü∂ U.up} {œÄ' : B ‚ü∂ A}
  (is : IsPullback Œ≥ œÄ U.hom Œ¥) (is' : IsPullback Œ≥' œÄ' U.hom Œ¥')

/-
def pullbackAux : IsPullback Œ≥' (œÄ' ‚â´ (U.isoIsPullback is).hom) U.hom
  ((U.isoIsPullback is).inv ‚â´ Œ¥') := by
  apply is'.of_iso (Iso.refl _) (Iso.refl _) (U.isoIsPullback is) (Iso.refl _)
  <;> simp
-/
def form‚ÇÄ' (_ : IsPullback Œ≥' œÄ' U.hom Œ¥') : Over.mk Œ¥ ‚ü∂ op U :=
  IsPullback.adjEquiv is.flip _ (Over.homMk (prod.lift Œ¥' Œ≥))

abbrev form‚ÇÄ : Œì ‚ü∂ obj U := (form‚ÇÄ' is is').left

lemma form‚ÇÄ_comp_hom : form‚ÇÄ is is' ‚â´ hom U = Œ¥ := by
  simp only [Over.w, Over.mk_hom]

def form‚ÇÅ' : Over.mk Œ≥ ‚ü∂ gen‚ÇÅ_fst' U :=
  is.flip.liftIsPullbackAlong' (U.isPullback (hom U)).flip (form‚ÇÄ' is is')

abbrev form‚ÇÅ : A ‚ü∂ gen‚ÇÅ U := (form‚ÇÅ' is is').left

lemma form‚ÇÅ'_comp_gen‚ÇÇhom‚ÇÄ :
    form‚ÇÅ' is is' ‚â´ gen‚ÇÇ_hom‚ÇÄ U = Over.homMk (prod.lift Œ¥' Œ≥) := by
  simp only [form‚ÇÅ', gen‚ÇÇ_hom‚ÇÄ]
  rw [IsPullback.adjEquiv_naturality_symm_left, Category.comp_id]
  simp [form‚ÇÄ', Equiv.symm_apply_apply]

@[simp, reassoc]
lemma form‚ÇÅ_comp_gen‚ÇÇhom‚ÇÄ_left :
    form‚ÇÅ is is' ‚â´ (gen‚ÇÇ_hom‚ÇÄ U).left = prod.lift Œ¥' Œ≥ :=
  congrArg CommaMorphism.left (form‚ÇÅ'_comp_gen‚ÇÇhom‚ÇÄ is is')

@[simp]
lemma form‚ÇÅ_comp_Gen‚ÇÇhom :
    form‚ÇÅ is is' ‚â´ gen‚ÇÇ_hom U = Œ¥' := by
  simp [gen‚ÇÇ_hom, ‚Üê Category.assoc, form‚ÇÅ_comp_gen‚ÇÇhom‚ÇÄ_left]

@[simp]
lemma form‚ÇÅ_comp_fst :
    form‚ÇÅ is is' ‚â´ gen‚ÇÅ_fst U = Œ≥ := by
  rw [‚Üê gen‚ÇÇ_hom‚ÇÄ_comp_prod_snd, form‚ÇÅ_comp_gen‚ÇÇhom‚ÇÄ_left_assoc, prod.lift_snd]

@[simp]
lemma form‚ÇÅ_comp_snd :
    form‚ÇÅ is is' ‚â´ gen‚ÇÅ_snd U = œÄ ‚â´ form‚ÇÄ is is' := by
  simp [form‚ÇÅ, form‚ÇÅ']

def form‚ÇÅ'' : Over.mk Œ¥' ‚ü∂ Over.mk (gen‚ÇÇ_hom U) :=
  Over.homMk (form‚ÇÅ is is') (form‚ÇÅ_comp_Gen‚ÇÇhom is is')

def form‚ÇÇ' : Over.mk Œ≥' ‚ü∂ gen‚ÇÇ_fst' U :=
  is'.flip.liftIsPullbackAlong' (U.isPullback (gen‚ÇÇ_hom U)).flip (form‚ÇÅ'' is is')

abbrev form‚ÇÇ : B ‚ü∂ Gen‚ÇÇ U := (form‚ÇÇ' is is').left

@[simp]
lemma form‚ÇÇ_comp_fst :
    form‚ÇÇ is is' ‚â´ gen‚ÇÇ_fst U = Œ≥' := by
  simp [form‚ÇÇ, form‚ÇÇ', Pi.form‚ÇÇ_comp_fst]

@[simp]
lemma form‚ÇÇ_comp_snd :
    form‚ÇÇ is is' ‚â´ gen‚ÇÇ_snd U = œÄ' ‚â´ form‚ÇÅ is is' := by
  simp [form‚ÇÇ, form‚ÇÇ', form‚ÇÅ'']

def form‚ÇÅ_isPullback :
    IsPullback (form‚ÇÅ is is') œÄ (gen‚ÇÅ_snd U) (form‚ÇÄ is is') := by
  apply IsPullback.of_right _ (form‚ÇÅ_comp_snd is is') (U.isPullback (hom U))
  simpa using is

def form‚ÇÇ_isPullback :
    IsPullback (form‚ÇÇ is is') œÄ' (gen‚ÇÇ_snd U) (form‚ÇÅ is is') := by
  apply IsPullback.of_right _ (form‚ÇÇ_comp_snd is is') (U.isPullback (gen‚ÇÇ_hom U))
  simpa using is'

variable {is is'}
/-
lemma form‚ÇÄ'_ext‚ÇÅ (f : Over.mk Œ¥ ‚ü∂ op U)
  (hf : (U.isoIsPullback is).hom ‚â´ (U.pullback_map.map f).left ‚â´ gen‚ÇÇ_hom U = Œ¥'):
    f = form‚ÇÄ' is is' := by
  apply Pi.form‚ÇÄ'_ext‚ÇÅ
  simp only [prod.lift_fst, ‚Üê hf, Iso.inv_hom_id_assoc, Category.assoc]
-/

lemma form‚ÇÄ'_ext (f : Over.mk Œ¥ ‚ü∂ op U)
  (hf : (is.flip.liftIsPullbackAlong' (U.isPullback (hom U)).flip f).left ‚â´ gen‚ÇÇ_hom U = Œ¥') :
    f = form‚ÇÄ' is is' := by
  simp [form‚ÇÄ']
  apply_fun (IsPullback.adjEquiv is.flip U.proj‚ÇÇ').symm
  rw [Equiv.symm_apply_apply, ‚Üê Category.comp_id f,
      ‚Üê IsPullback.adjEquiv_naturality_symm_left (U.isPullback _).flip]
  ext; apply Limits.prod.hom_ext
  . simpa using hf
  . /-have : (U.pullback_map.map f).left ‚â´ (gen‚ÇÇ_hom‚ÇÄ U).left ‚â´ prod.snd = U.fst Œ¥ := by
      simp only [pullback_map.map_left_eq_lift, gen‚ÇÇ_hom‚ÇÄ_comp_prod_snd,
        Over.mk_hom, IsPullback.lift_fst]
    simp; conv_rhs => rw [‚Üê this]
    simp-/
    simp; erw [gen‚ÇÇ_hom‚ÇÄ_comp_prod_snd, IsPullback.liftIsPullbackAlong_snd]

/-
lemma form‚ÇÄ_ext‚ÇÅ (f : Œì ‚ü∂ obj U)
  (hf‚ÇÅ : f ‚â´ hom U = Œ¥) (hf‚ÇÇ : (U.isoIsPullback is).hom ‚â´
    (U.pullback_map.map (Over.homMk f hf‚ÇÅ : Over.mk Œ¥ ‚ü∂ op U)).left ‚â´ gen‚ÇÇ_hom U = Œ¥') :
    f = form‚ÇÄ is is' := by
  change (Over.homMk f hf‚ÇÅ : Over.mk Œ¥ ‚ü∂ op U).left = (form‚ÇÄ' is is').left
  rw [form‚ÇÄ'_ext‚ÇÅ _ hf‚ÇÇ]
-/

lemma form‚ÇÄ_ext (f : Œì ‚ü∂ obj U)
  (hf‚ÇÅ : f ‚â´ hom U = Œ¥) (hf‚ÇÇ : (is.flip.liftIsPullbackAlong' (U.isPullback (hom U)).flip
    (Over.homMk f hf‚ÇÅ : Over.mk Œ¥ ‚ü∂ op U)).left ‚â´ gen‚ÇÇ_hom U = Œ¥') :
    f = form‚ÇÄ is is' := by
  change (Over.homMk f hf‚ÇÅ : Over.mk Œ¥ ‚ü∂ op U).left = (form‚ÇÄ' is is').left
  rw [form‚ÇÄ'_ext _ hf‚ÇÇ]

end
end Pi
end
/-
abbrev Sigma_object := (Œ†(U.map)).obj (Over.mk (Proj‚ÇÇ U))

abbrev Sigma_objectProj : (Pi_object U).left ‚ü∂ U.obj := (Pi_object U).hom

abbrev Sigma_AGen : C := U.pb (Pi_object U).hom

abbrev Sigma_AGenVMap : Sigma_AGen U ‚ü∂ (Pi_object U).left := U.pb_vmap (Pi_object U).hom

abbrev Sigma_BGen : C := U.pb (Sigma_AGenVMap U ‚â´ Sigma_objectProj U)

abbrev Sigma_BGenVMap : Sigma_BGen U ‚ü∂ Sigma_AGen U := U.pb_vmap (Sigma_AGenVMap U ‚â´ Sigma_objectProj U)

structure Sigma_structure where
  map : (Sigma_object U).left ‚ü∂ U.obj
  eq : (Œ£(Pi_AGenVMap U)).obj (Over.mk (Pi_BGenVMap U)) ‚âÖ Over.mk (U.pb_vmap map)

abbrev Id_object : C := U.pb U.map

abbrev Id_map : Id_object U ‚ü∂ U.obj := U.pb_vmap U.map ‚â´ U.map

abbrev Id_diag : U.obj' ‚ü∂ Id_object U := Limits.PullbackCone.IsLimit.lift (U.is_pullback) (ùüô U.obj') (ùüô U.obj') rfl

structure Id_structure where
  map : Id_object U ‚ü∂ U.obj
  refl : U.obj' ‚ü∂ U.pb (Id_map U)
  comm : refl ‚â´ U.pb_vmap (Id_map U) = Id_diag U


variable (map : prod U.obj U.obj ‚ü∂ U.obj)

-- not sure about `HasBinaryCoproducts C` or `HasBinaryCoproduct xxx yyy`
abbrev CoprodProj [HasBinaryCoproducts C] : C := coprod (U.pb <| @prod.fst _ _ U.obj U.obj _) (U.pb <| @prod.snd _ _ U.obj U.obj _)

abbrev CoprojProjMap [HasBinaryCoproducts C] : CoprodProj U ‚ü∂ prod U.obj U.obj :=  coprod.desc (U.pb_vmap _) (U.pb_vmap _)

structure Coproduct_structure [HasBinaryCoproducts C] where
  map : prod U.obj U.obj ‚ü∂ U.obj
  eq :  CategoryTheory.Over.mk (CoprojProjMap U) ‚âÖ Over.mk (U.pb_vmap map)

-- 1. a chosen initial or 2. initial as an extra property?
structure Zero_structure where
  map : t ‚ü∂ U.obj
  eq : IsInitial (U.pb map : C)

structure Unit_structure where
  map : t ‚ü∂ U.obj
  eq : IsTerminal (U.pb map : C)

-- internal universe
structure InternalUniverse where
  op : t ‚ü∂ U.obj
  map : U.pb op ‚ü∂ U.obj

def ofInternalUniverse {U} (I : @InternalUniverse C _ t U) : Universe C where
  obj := U.pb I.uni
  obj' := U.pb I.map
  map := U.pb_vmap I.map
  pb f := U.pb (f ‚â´ I.map)
  pb_vmap f := U.pb_vmap (f ‚â´ I.map)
  pb_hmap f := Limits.PullbackCone.IsLimit.lift U.is_pullback (U.pb_vmap (f ‚â´ I.map) ‚â´ f) (U.pb_hmap (f ‚â´ I.map)) (by rw [‚Üê U.comm]; simp)
  comm {X} {f} := by
    simp
    have : U.pb_vmap I.map = PullbackCone.fst (PullbackCone.mk (U.pb_vmap I.map) (U.pb_hmap I.map) (by rw [‚Üê U.comm])) := rfl
    simp_rw [this, PullbackCone.IsLimit.lift_fst]
    -- exact (@PullbackCone.IsLimit.lift_fst _ _ _ _ _ _ _ (PullbackCone.mk (U.pb_vmap I.map) (U.pb_hmap I.map) U.comm) U.is_pullback _ (U.pb_vmap (f ‚â´ I.map) ‚â´ f) (U.pb_hmap (f ‚â´ I.map)) (by rw [‚Üê U.comm]; simp)).symm
  is_pullback {X} {f} := by
    apply CategoryTheory.Limits.leftSquareIsPullback (Limits.PullbackCone.IsLimit.lift U.is_pullback (U.pb_vmap (f ‚â´ I.map) ‚â´ f) (U.pb_hmap (f ‚â´ I.map)) (by rw [‚Üê U.comm]; simp)) (U.pb_hmap I.map) f I.map (U.pb_vmap (f ‚â´ I.map)) (U.pb_vmap I.map) U.map _ U.comm U.is_pullback
    have : U.pb_hmap (f ‚â´ I.map) = PullbackCone.IsLimit.lift U.is_pullback (U.pb_vmap (f ‚â´ I.map) ‚â´ f) (U.pb_hmap (f ‚â´ I.map)) (by rw [‚Üê U.comm]; simp) ‚â´ U.pb_hmap I.map := by
      have : U.pb_hmap I.map = PullbackCone.snd (PullbackCone.mk (U.pb_vmap I.map) (U.pb_hmap I.map) (by rw [‚Üê U.comm])) := rfl
      simp_rw [this, PullbackCone.IsLimit.lift_snd]
    simp_rw [‚Üê this]
    apply U.is_pullback

namespace InternalUniverse

variable (I : @InternalUniverse C _ t U)

structure ClosedUnderPi (U_Pi : Pi_structure U) where
  Pi : Pi_structure (ofInternalUniverse I)
  comm : Pi.map ‚â´ I.map = Pi.map ‚â´ I.map -- don't know how to construt the functoriality mathematically...

end InternalUniverse

end Universe
-/

namespace Empty

variable [HasTerminal C]

-- 1. a chosen initial or 2. initial as an extra property?
structure Structure where
  map : ‚ä§_ C ‚ü∂ U.down
  is_initial : IsInitial (Over.mk (U.snd map))

end Empty

namespace Unit

variable [HasTerminal C]

-- 1. a chosen initial or 2. initial as an extra property?
structure Structure where
  map : ‚ä§_ C ‚ü∂ U.down
  iso : U.snd' map ‚âÖ Over.mk (ùüô _)

end Unit
