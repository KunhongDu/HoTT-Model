import HoTTModel.LocallyCartesionClosed
import HoTTModel.Universe
import HoTTModel.Lemmas.Limits

noncomputable section

open CategoryTheory Limits List ContextualCategory LocallyCartesianClosed

variable {C : Type u} [CategoryTheory.Category.{v, u} C] [HasPullbacks C] [LocallyCartesianClosed C] [HasBinaryProducts C] {t : C} (ht : IsTerminal t)

-- binary product follows from pullback + terminal object, but I'll assume this instance for now

namespace Universe

variable (U : Universe C)

namespace Pi

abbrev Op := (Œ†(U.map)).obj (CategoryTheory.Over.mk U.Proj‚ÇÇ)

abbrev Obj := (Op U).left

abbrev Hom : Obj U ‚ü∂ U.obj := (Op U).hom

abbrev AGen : C := U.pt (Op U).hom

abbrev AGenFst : AGen U ‚ü∂ U.obj' := U.fst (Hom U)

abbrev AGenSnd : AGen U ‚ü∂ Obj U := U.snd (Hom U)

abbrev BGenHom : AGen U ‚ü∂ U.obj := ((LocallyCartesianClosed.isLimit_equiv (U.pullback (Hom U)).flip (Over.mk U.Proj‚ÇÇ)).invFun (ùüô _)).left ‚â´ U.Proj‚ÇÅ

abbrev BGen : C := U.pt (BGenHom U)

abbrev BGenFst : BGen U ‚ü∂ U.obj' := U.fst (BGenHom U)

abbrev BGenSnd : BGen U ‚ü∂ AGen U := U.snd (BGenHom U)

structure Structure where
  map : (Op U).left ‚ü∂ U.obj
  Eq : (Œ†(AGenSnd U)).obj (Over.mk (BGenSnd U)) ‚âÖ Over.mk (U.snd map)

-- want to prove def 1.4.1 KLV
-- for the symbols below, see a scipt paper with `TTPI` in right upper corner
variable {U : Universe C} {Œì A B : C}
{f : Œì ‚ü∂ U.obj} {g : A ‚ü∂ U.obj'} {h : A ‚ü∂ Œì} (pb : IsPullback g h U.map f)
{f' : A ‚ü∂ U.obj} {g' : B ‚ü∂ U.obj'} {h' : B ‚ü∂ A} (is' : IsPullback g' h' U.map f')

def ind_f' (f' : A ‚ü∂ U.obj) : Over.mk f ‚ü∂ Op U := (LocallyCartesianClosed.isLimit_equiv pb.flip (Over.mk U.Proj‚ÇÇ)).toFun <| Over.homMk (U := Over.mk g) (V := Over.mk U.Proj‚ÇÇ) (prod.lift f' g) (by simp)

def ind_f (f' : A ‚ü∂ U.obj) : Œì ‚ü∂ Obj U := (ind_f' pb f').left

-- better write a lift for all pullback, edit aux2 and isLimit_equiv in the other file

abbrev aux {X Y Z Z' W W': C} {f : X ‚ü∂ Y}  {g : Z ‚ü∂ Y} {g' : Z' ‚ü∂ Y}
{u : W ‚ü∂ Z} {u' : W' ‚ü∂ Z'} {v : W ‚ü∂ X} {v' : W' ‚ü∂ X}
(pb : IsPullback u v g f) (pb' : IsPullback u' v' g' f)
(i : Over.mk g ‚ü∂ Over.mk g') : W ‚ü∂ W' := PullbackCone.IsLimit.lift pb'.isLimit (u ‚â´ i.left) v (by simp [‚Üê pb.w]; congr; exact Over.w i)

abbrev aux_fst {X Y Z Z' W W': C} {f : X ‚ü∂ Y}  {g : Z ‚ü∂ Y} {g' : Z' ‚ü∂ Y}
{u : W ‚ü∂ Z} {u' : W' ‚ü∂ Z'} {v : W ‚ü∂ X} {v' : W' ‚ü∂ X}
(pb : IsPullback u v g f) (pb' : IsPullback u' v' g' f)
(i : Over.mk g ‚ü∂ Over.mk g') : (aux pb pb' i) ‚â´ u' = u ‚â´ i.left := CategoryTheory.Limits.PullbackCone.IsLimit.lift_fst _ _ _ _

abbrev aux_snd {X Y Z Z' W W': C} {f : X ‚ü∂ Y}  {g : Z ‚ü∂ Y} {g' : Z' ‚ü∂ Y}
{u : W ‚ü∂ Z} {u' : W' ‚ü∂ Z'} {v : W ‚ü∂ X} {v' : W' ‚ü∂ X}
(pb : IsPullback u v g f) (pb' : IsPullback u' v' g' f)
(i : Over.mk g ‚ü∂ Over.mk g') : (aux pb pb' i) ‚â´ v' = v := CategoryTheory.Limits.PullbackCone.IsLimit.lift_snd _ _ _ _

-- several comm condition on aux

def ind_g (f' : A ‚ü∂ U.obj) : A ‚ü∂ AGen U := aux pb.flip (U.pullback (Hom U)).flip (ind_f' pb f')

lemma ind_comm' (f' : A ‚ü∂ U.obj) : (ind_g pb f') ‚â´ AGenSnd U = h ‚â´ (ind_f pb f') := aux_fst pb.flip _ _

lemma eq_g : (ind_g pb f') ‚â´ AGenFst U = g := aux_snd pb.flip _ _

lemma eq_f : (ind_f pb f') ‚â´ Hom U = f := by simp [ind_f]

def Limits.leftSquareIsPullback' {C : Type u} [Category.{v, u} C] {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : C}
  (f‚ÇÅ : X‚ÇÅ ‚ü∂ X‚ÇÇ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ X‚ÇÉ) (g‚ÇÅ : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) (g‚ÇÇ : Y‚ÇÇ ‚ü∂ Y‚ÇÉ) (i‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (i‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (i‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ)
  (h‚ÇÅ : f‚ÇÅ ‚â´ i‚ÇÇ = i‚ÇÅ ‚â´ g‚ÇÅ) (h‚ÇÇ : f‚ÇÇ ‚â´ i‚ÇÉ = i‚ÇÇ ‚â´ g‚ÇÇ) (H : IsLimit (PullbackCone.mk f‚ÇÇ i‚ÇÇ h‚ÇÇ))
  (H' : IsLimit (PullbackCone.mk (f‚ÇÅ ‚â´ f‚ÇÇ) i‚ÇÅ (show (f‚ÇÅ ‚â´ f‚ÇÇ) ‚â´ i‚ÇÉ = i‚ÇÅ ‚â´ g‚ÇÅ ‚â´ g‚ÇÇ  by
            rw [‚Üê Category.assoc, ‚Üê h‚ÇÅ, Category.assoc, h‚ÇÇ, Category.assoc]))) : IsLimit (PullbackCone.mk f‚ÇÅ i‚ÇÅ h‚ÇÅ) := by
  apply PullbackCone.isLimitOfFlip
  apply leftSquareIsPullback f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÉ h‚ÇÅ.symm h‚ÇÇ.symm
  apply PullbackCone.isLimitOfFlip
  apply H
  apply PullbackCone.isLimitOfFlip
  apply H'

abbrev aux2 {X Y Z W : C} {f f' : X ‚ü∂ Y}  {g g': Z ‚ü∂ Y} {fst fst' : W ‚ü∂ X} {snd snd' : W ‚ü∂ Z}
(comm : fst ‚â´ f = snd ‚â´ g) (h : IsLimit <| PullbackCone.mk _ _ comm) (h‚ÇÅ : f' = f) (h‚ÇÇ : g' = g)
(h‚ÇÉ : fst' = fst) (h‚ÇÑ : snd' = snd) : IsLimit <| PullbackCone.mk _ _ (show (fst' ‚â´ f' = snd' ‚â´ g') by rw [h‚ÇÅ, h‚ÇÇ, h‚ÇÉ, h‚ÇÑ, comm]) := by
  convert h

def ispb : IsLimit <| PullbackCone.mk _ _ (ind_comm' pb f') := by
  apply Limits.leftSquareIsPullback' (ind_g pb f') (AGenFst U) (ind_f pb f') (Hom U) h (AGenSnd U) U.map _ _ _ _
  apply (U.pullback _).w
  apply (U.pullback _).isLimit
  simp_rw [eq_g]
  apply aux2 pb.w pb.isLimit rfl (eq_f _) rfl rfl
  -- covert does not work here, it worked before though

#check (IsPullback.Iso_of_pullback pb).hom ‚â´ ind_g pb f'
#check (IsPullback.Iso_of_pullback (U.pullback (Hom U))).inv
#check ((U.map*).map (ind_f' pb f')).left
#simp => ((U.map*).obj (CategoryTheory.Over.mk f)).left ‚ü∂ ((U.map*).obj (Op U)).left
#check (IsPullback.Iso_of_pullback pb.flip).hom ‚â´ ind_g pb f' ‚â´ (IsPullback.Iso_of_pullback (U.pullback (Hom U)).flip).inv


-- proved!!!!
lemma auxxx : ind_g pb f' = (IsPullback.Iso_of_pullback pb.flip).inv ‚â´ ((U.map*).map (ind_f' pb f')).left ‚â´ (IsPullback.Iso_of_pullback (U.pullback (Hom U)).flip).hom := by
  dsimp [ind_g, aux]
  symm
  have := h ‚â´ (ind_f' pb f').left
  apply Limits.PullbackCone.IsLimit.lift_eq (U.pullback (Hom U)).flip.isLimit (h ‚â´ (ind_f' pb f').left) g ?_ ((IsPullback.Iso_of_pullback pb.flip).inv ‚â´ ((U.map*).map (ind_f' pb f')).left ‚â´ (IsPullback.Iso_of_pullback (U.pullback (Hom U)).flip).hom) ?_ ?_
  simp [pb.w]
  rw [Category.assoc, Iso.inv_comp_eq, ‚Üê Category.assoc _ h, IsPullback.Iso_of_pullback_hom_fst]
  rw [Category.assoc]
  simp
  simp only [IsPullback.Iso_of_pullback_hom_fst, limit.lift_œÄ, PullbackCone.mk_pt, PullbackCone.mk_œÄ_app]
  simp
  rw [IsPullback.Iso_of_pullback_hom_snd]
  simp only [limit.lift_œÄ, PullbackCone.mk_pt, PullbackCone.mk_œÄ_app, Category.comp_id]
  rw [IsPullback.Iso_of_pullback_inv_snd]


#check (IsPullback.Iso_of_pullback pb).hom ‚â´ prod.lift f' g
#check ((U.map*).map (ind_f' pb f') ‚â´ (adj U.map).counit.app (CategoryTheory.Over.mk U.Proj‚ÇÇ)).left
#simp => ((U.map*).obj (CategoryTheory.Over.mk f)).left ‚ü∂
  ((ùü≠ (CategoryTheory.Over U.obj')).obj (CategoryTheory.Over.mk U.Proj‚ÇÇ)).left

lemma llala : ((U.map*).map (ind_f' pb f') ‚â´ (adj U.map).counit.app (CategoryTheory.Over.mk U.Proj‚ÇÇ)).left = (IsPullback.Iso_of_pullback pb.flip).hom ‚â´ prod.lift f' g := by
  rw [‚Üê Adjunction.homEquiv_counit]
  dsimp [ind_f', isLimit_equiv]
  simp

-- for the proof find TTP2
lemma aaa : ind_g pb f' ‚â´ ((isLimit_equiv (U.pullback (Hom U)).flip (Over.mk <| U.Proj‚ÇÇ)).invFun (ùüô _)).left = prod.lift f' g := by
  simp [isLimit_equiv]
  simp only [auxxx, Category.assoc, Iso.hom_inv_id_assoc, ‚Üê Over.comp_left, llala, prod.comp_lift, Iso.inv_hom_id_assoc]

example : ind_g pb f' ‚â´ (BGenHom U) = f' := by
  simp only [BGenHom, ‚Üê Category.assoc, aaa, limit.lift_œÄ, BinaryFan.mk_fst]


-- solve the hardest part....
-- maybe should work in Over throughout...

end Pi




#exit
abbrev Sigma_object := (Œ†(U.map)).obj (Over.mk (Proj‚ÇÇ U))

abbrev Sigma_objectProj : (Pi_object U).left ‚ü∂ U.obj := (Pi_object U).hom

abbrev Sigma_AGen : C := U.pb (Pi_object U).hom

abbrev Sigma_AGenVMap : Sigma_AGen U ‚ü∂ (Pi_object U).left := U.pb_vmap (Pi_object U).hom

abbrev Sigma_BGen : C := U.pb (Sigma_AGenVMap U ‚â´ Sigma_objectProj U)

abbrev Sigma_BGenVMap : Sigma_BGen U ‚ü∂ Sigma_AGen U := U.pb_vmap (Sigma_AGenVMap U ‚â´ Sigma_objectProj U)

structure Sigma_structure where
  map : (Sigma_object U).left ‚ü∂ U.obj
  eq : (Œ£(Pi_AGenVMap U)).obj (Over.mk (Pi_BGenVMap U)) ‚âÖ Over.mk (U.pb_vmap map)

abbrev Id_object : C := U.pb U.map

abbrev Id_map : Id_object U ‚ü∂ U.obj := U.pb_vmap U.map ‚â´ U.map

abbrev Id_diag : U.obj' ‚ü∂ Id_object U := Limits.PullbackCone.IsLimit.lift (U.is_pullback) (ùüô U.obj') (ùüô U.obj') rfl

structure Id_structure where
  map : Id_object U ‚ü∂ U.obj
  refl : U.obj' ‚ü∂ U.pb (Id_map U)
  comm : refl ‚â´ U.pb_vmap (Id_map U) = Id_diag U


variable (map : prod U.obj U.obj ‚ü∂ U.obj)

-- not sure about `HasBinaryCoproducts C` or `HasBinaryCoproduct xxx yyy`
abbrev CoprodProj [HasBinaryCoproducts C] : C := coprod (U.pb <| @prod.fst _ _ U.obj U.obj _) (U.pb <| @prod.snd _ _ U.obj U.obj _)

abbrev CoprojProjMap [HasBinaryCoproducts C] : CoprodProj U ‚ü∂ prod U.obj U.obj :=  coprod.desc (U.pb_vmap _) (U.pb_vmap _)

structure Coproduct_structure [HasBinaryCoproducts C] where
  map : prod U.obj U.obj ‚ü∂ U.obj
  eq :  CategoryTheory.Over.mk (CoprojProjMap U) ‚âÖ Over.mk (U.pb_vmap map)

-- 1. a chosen initial or 2. initial as an extra property?
structure Zero_structure where
  map : t ‚ü∂ U.obj
  eq : IsInitial (U.pb map : C)

structure Unit_structure where
  map : t ‚ü∂ U.obj
  eq : IsTerminal (U.pb map : C)

-- internal universe
structure InternalUniverse where
  Op : t ‚ü∂ U.obj
  map : U.pb Op ‚ü∂ U.obj

def ofInternalUniverse {U} (I : @InternalUniverse C _ t U) : Universe C where
  obj := U.pb I.uni
  obj' := U.pb I.map
  map := U.pb_vmap I.map
  pb f := U.pb (f ‚â´ I.map)
  pb_vmap f := U.pb_vmap (f ‚â´ I.map)
  pb_hmap f := Limits.PullbackCone.IsLimit.lift U.is_pullback (U.pb_vmap (f ‚â´ I.map) ‚â´ f) (U.pb_hmap (f ‚â´ I.map)) (by rw [‚Üê U.comm]; simp)
  comm {X} {f} := by
    simp
    have : U.pb_vmap I.map = PullbackCone.fst (PullbackCone.mk (U.pb_vmap I.map) (U.pb_hmap I.map) (by rw [‚Üê U.comm])) := rfl
    simp_rw [this, PullbackCone.IsLimit.lift_fst]
    -- exact (@PullbackCone.IsLimit.lift_fst _ _ _ _ _ _ _ (PullbackCone.mk (U.pb_vmap I.map) (U.pb_hmap I.map) U.comm) U.is_pullback _ (U.pb_vmap (f ‚â´ I.map) ‚â´ f) (U.pb_hmap (f ‚â´ I.map)) (by rw [‚Üê U.comm]; simp)).symm
  is_pullback {X} {f} := by
    apply CategoryTheory.Limits.leftSquareIsPullback (Limits.PullbackCone.IsLimit.lift U.is_pullback (U.pb_vmap (f ‚â´ I.map) ‚â´ f) (U.pb_hmap (f ‚â´ I.map)) (by rw [‚Üê U.comm]; simp)) (U.pb_hmap I.map) f I.map (U.pb_vmap (f ‚â´ I.map)) (U.pb_vmap I.map) U.map _ U.comm U.is_pullback
    have : U.pb_hmap (f ‚â´ I.map) = PullbackCone.IsLimit.lift U.is_pullback (U.pb_vmap (f ‚â´ I.map) ‚â´ f) (U.pb_hmap (f ‚â´ I.map)) (by rw [‚Üê U.comm]; simp) ‚â´ U.pb_hmap I.map := by
      have : U.pb_hmap I.map = PullbackCone.snd (PullbackCone.mk (U.pb_vmap I.map) (U.pb_hmap I.map) (by rw [‚Üê U.comm])) := rfl
      simp_rw [this, PullbackCone.IsLimit.lift_snd]
    simp_rw [‚Üê this]
    apply U.is_pullback

namespace InternalUniverse

variable (I : @InternalUniverse C _ t U)

structure ClosedUnderPi (U_Pi : Pi_structure U) where
  Pi : Pi_structure (ofInternalUniverse I)
  comm : Pi.map ‚â´ I.map = Pi.map ‚â´ I.map -- don't know how to construt the functoriality mathematically...

end InternalUniverse

end Universe
